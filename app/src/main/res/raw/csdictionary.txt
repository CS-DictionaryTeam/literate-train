&&

<p>The operator <span class="snippet" style="font-weight: bold;">&amp;&amp;</span> indicates the <em>boolean and</em> operation. (It is sometimes called <em>logical and</em>.) The result is <span class="snippet" style="font-weight: bold;">true</span> if and only if both of the operands are <span class="snippet" style="font-weight: bold;">true</span>.</p>
<p>Consider the following example:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_java5" style="width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="java5" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="vertical-align: top;"><span style="color: #003399; font-weight: bold;">System</span>.<span style="color: #006633;">out</span>.<span style="color: #006633;">println</span><span style="color: #009900;">(</span><span style="color: #cc66cc;">5</span> <span style="color: #339933;">&gt;</span> <span style="color: #cc66cc;">2</span> <span style="color: #339933;">&amp;&amp;</span> <span style="color: #cc66cc;">1</span> <span style="color: #339933;">&gt;</span> <span style="color: #cc66cc;">0</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>  <span style="color: #666666; font-style: italic;">// This will print true.</span></span>
<span style="vertical-align: top;"><span style="color: #003399; font-weight: bold;">System</span>.<span style="color: #006633;">out</span>.<span style="color: #006633;">println</span><span style="color: #009900;">(</span><span style="color: #cc66cc;">5</span> <span style="color: #339933;">&gt;</span> <span style="color: #cc66cc;">6</span> <span style="color: #339933;">&amp;&amp;</span> <span style="color: #cc66cc;">1</span> <span style="color: #339933;">&gt;</span> <span style="color: #cc66cc;">0</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>  <span style="color: #666666; font-style: italic;">// This will print false.</span></span>
<span style="vertical-align: top;"><span style="color: #000000; font-weight: bold;">if</span> <span style="color: #009900;">(</span><span style="color: #cc66cc;">10</span> <span style="color: #339933;">&gt;</span> <span style="color: #cc66cc;">5</span> <span style="color: #339933;">&amp;&amp;</span> <span style="color: #cc66cc;">5</span> <span style="color: #339933;">&gt;</span> <span style="color: #cc66cc;">10</span><span style="color: #009900;">)</span></span>
<span style="vertical-align: top;"><span style="color: #009900;">{</span></span>
<span style="vertical-align: top;">    <span style="color: #003399; font-weight: bold;">System</span>.<span style="color: #006633;">out</span>.<span style="color: #006633;">println</span><span style="color: #009900;">(</span><span style="color: #0000ff;">"Huh?!"</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>     <span style="color: #666666; font-style: italic;">// This will not be printed.</span></span>
<span style="vertical-align: top;"><span style="color: #009900;">}</span></span></pre>
</div>
</div>
</div>
<p> <br>See also <span class="snippet" style="font-weight: bold;">||</span>.</p>

null





||

<p>The operator <span class="snippet" style="font-weight: bold;">||</span> indicates the <em>boolean or</em> operation. (It is sometimes called <em>logical or</em>.) The result is <span class="snippet" style="font-weight: bold;">true</span> unless both of the operands are <span class="snippet" style="font-weight: bold;">false</span>.</p>
<p>Consider this example:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_java5" style="overflow: auto; width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="java5" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="vertical-align: top;"><span style="color: #003399; font-weight: bold;">System</span>.<span style="color: #006633;">out</span>.<span style="color: #006633;">println</span><span style="color: #009900;">(</span><span style="color: #cc66cc;">5</span> <span style="color: #339933;">&gt;</span> <span style="color: #cc66cc;">2</span> || <span style="color: #cc66cc;">1</span> == <span style="color: #cc66cc;">0</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>  <span style="color: #666666; font-style: italic;">// This will print true.</span></span>
<span style="vertical-align: top;"><span style="color: #003399; font-weight: bold;">System</span>.<span style="color: #006633;">out</span>.<span style="color: #006633;">println</span><span style="color: #009900;">(</span><span style="color: #cc66cc;">5</span> <span style="color: #339933;">&gt;</span> <span style="color: #cc66cc;">6</span> <span style="color: #339933;">&amp;&amp;</span> <span style="color: #cc66cc;">1</span> <span style="color: #339933;">&lt;</span> <span style="color: #cc66cc;">0</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>   <span style="color: #666666; font-style: italic;">// This will print false.</span></span>
<span style="vertical-align: top;"><span style="color: #000000; font-weight: bold;">if</span> <span style="color: #009900;">(</span><span style="color: #cc66cc;">1</span> == <span style="color: #cc66cc;">2</span> || <span style="color: #cc66cc;">2</span> == <span style="color: #cc66cc;">3</span><span style="color: #009900;">)</span></span>
<span style="vertical-align: top;"><span style="color: #009900;">{</span></span>
<span style="vertical-align: top;">    <span style="color: #003399; font-weight: bold;">System</span>.<span style="color: #006633;">out</span>.<span style="color: #006633;">println</span><span style="color: #009900;">(</span><span style="color: #0000ff;">"Huh?!"</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>     <span style="color: #666666; font-style: italic;">// This will not be printed.</span></span>
<span style="vertical-align: top;"><span style="color: #009900;">}</span></span></pre>
</div>
</div>
</div>
<p> <br>See also <span class="snippet" style="font-weight: bold;">&amp;&amp;</span>.</p>

null





abstract

<p>The keyword <span class="snippet" style="font-weight: bold;">abstract</span> is used when declaring an <span class="snippet" style="font-weight: bold;">abstract</span> method or an <span class="snippet" style="font-weight: bold;">abstract</span> class.</p>

keywords





abstract class

<p>An abstract class is a class that cannot be instantiated. It must include the keyword "<span class="snippet" style="font-weight: bold;">abstract</span>" in its declaration:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_java5" style="overflow: auto; width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="java5" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="vertical-align: top;"><span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000000; font-weight: bold;">class</span> <span style="color: #000000; font-weight: bold;">abstract</span> ArrayProcessor <span style="color: #009900;">{</span></span>
<span style="vertical-align: top;">  <span style="color: #666666; font-style: italic;">// body removed</span></span>
<span style="vertical-align: top;"><span style="color: #009900;">}</span></span></pre>
</div>
</div>
</div>
<p> <br>A class must be abstract if it either:</p>
<ul>
<li>declares an abstract method</li>
<li>inherits (but does not override) an abstract method</li>
</ul>
<p>Abstract classes should have concrete subclasses that implement the abstract methods.</p>

null





abstract method

<p>A method is abstract if it:</p>
<ul>
<li>is declared with the keyword "<span class="snippet" style="font-weight: bold;">abstract</span>" and</li>
<li>does not have a body</li>
</ul>
<p>An example is:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_java5" style="overflow: auto; width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="java5" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="vertical-align: top;">    <span style="color: #008000; font-style: italic; font-weight: bold;">/**</span>
<span style="vertical-align: top;">     * Perform the subclass-specific function on the current number in the</span>
<span style="vertical-align: top;">     * array, returning the intermediate result.</span>
<span style="vertical-align: top;">     * </span>
<span style="vertical-align: top;">     * @param number the number to process</span>
<span style="vertical-align: top;">     * @return the intermediate result of the function</span>
<span style="vertical-align: top;">     */</span></span>
<span style="vertical-align: top;">    <span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000000; font-weight: bold;">abstract</span> <span style="color: #006600; font-weight: bold;">int</span> processNumber<span style="color: #009900;">(</span><span style="color: #006600; font-weight: bold;">int</span> number<span style="color: #009900;">)</span><span style="color: #339933;">;</span></span></pre>
</div>
</div>
</div>
<p> <br>The method is implemented by a subclass.</p>
<p>If a class contains any abstract methods, it is an abstract class and cannot be instantiated.</p>
<p> </p>

null





actual parameter

<p>An actual parameter is a value that is passed to a method or constructor. Consider the following code:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_java5" style="overflow: auto; width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="java5" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="vertical-align: top;">move<span style="color: #009900;">(</span><span style="color: #cc66cc;">5</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></span></pre>
</div>
</div>
</div>
<p> <br>The value 5 is the actual parameter to <span class="snippet" style="font-weight: bold;">move()</span>, in contrast to the formal parameter, which appears in <span class="snippet" style="font-weight: bold;">move()</span>'s signature.</p>
<p>See also parameter.</p>

null





API

<p>The term API (Application Programmer Interface) refers to the web pages (created through javadoc) that describe classes and their fields, constructors, and methods.</p>
<p>To find documentation for String (or any other standard Java class), do a web search for "java api String".</p>
<p>You can view the Greenfoot documentation through the menu item <span class="mac" style="color: #3366ff;">Help &gt; Greenfoot Class Documentation</span>. Another way is by doing a web search for "Greenfoot api".</p>
<p> </p>

null





argument

<p>A synonym for parameter.</p>

null





array

<p>An array is a fixed-size ordered collection of elements of the same type, each of which can be directly referenced through an index.  The type of an array is specified as the type of individual elements, followed by paired square brackets. Individual elements are referenced by the name of the array followed by brackets containing an integer index. The index 0 is used for the first element.</p>
<p>Here is an example:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_java5" style="width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="java5" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="vertical-align: top;"><span style="color: #003399; font-weight: bold;">String</span><span style="color: #009900;">[</span><span style="color: #009900;">]</span> instructors = <span style="color: #009900;">{</span><span style="color: #0000ff;">"Alex"</span>, <span style="color: #0000ff;">"Allison"</span>, <span style="color: #0000ff;">"Ashley"</span>, <span style="color: #0000ff;">"Rachel"</span><span style="color: #009900;">}</span><span style="color: #339933;">;</span></span>
<span style="vertical-align: top;"> </span>
<span style="vertical-align: top;"><span style="color: #003399; font-weight: bold;">System</span>.<span style="color: #006633;">out</span>.<span style="color: #006633;">println</span><span style="color: #009900;">(</span>instructors<span style="color: #009900;">[</span><span style="color: #cc66cc;">0</span><span style="color: #009900;">]</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>     <span style="color: #666666; font-style: italic;">// Output: Alex</span></span>
<span style="vertical-align: top;"><span style="color: #003399; font-weight: bold;">System</span>.<span style="color: #006633;">out</span>.<span style="color: #006633;">println</span><span style="color: #009900;">(</span>instructors<span style="color: #009900;">[</span><span style="color: #cc66cc;">1</span><span style="color: #009900;">]</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>     <span style="color: #666666; font-style: italic;">// Output: Allison</span></span>
<span style="vertical-align: top;"><span style="color: #003399; font-weight: bold;">System</span>.<span style="color: #006633;">out</span>.<span style="color: #006633;">println</span><span style="color: #009900;">(</span>instructors.<span style="color: #006633;">length</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span> <span style="color: #666666; font-style: italic;">// Output: 4</span></span>
<span style="vertical-align: top;">instructors<span style="color: #009900;">[</span><span style="color: #cc66cc;">3</span><span style="color: #009900;">]</span> = <span style="color: #0000ff;">"Achel"</span><span style="color: #339933;">;</span>  <span style="color: #666666; font-style: italic;">// Replace the final element of the array.</span></span></pre>
</div>
</div>
</div>
<p> <br>For-loops are often used to do something to every value of an array. Continuing the following example:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_java5" style="width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="java5" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="vertical-align: top;"><span style="color: #000000; font-weight: bold;">for</span> <span style="color: #009900;">(</span><span style="color: #006600; font-weight: bold;">int</span> i = <span style="color: #cc66cc;">0</span><span style="color: #339933;">;</span> i <span style="color: #339933;">&lt;</span> instructors.<span style="color: #006633;">length</span><span style="color: #339933;">;</span> i++<span style="color: #009900;">)</span></span>
<span style="vertical-align: top;"><span style="color: #009900;">{</span></span>
<span style="vertical-align: top;">    <span style="color: #003399; font-weight: bold;">System</span>.<span style="color: #006633;">out</span>.<span style="color: #006633;">println</span><span style="color: #009900;">(</span>instructors<span style="color: #009900;">[</span>i<span style="color: #009900;">]</span> + <span style="color: #0000ff;">" is awesome!"</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></span>
<span style="vertical-align: top;"><span style="color: #009900;">}</span></span></pre>
</div>
</div>
</div>
<p> <br>The output would be:</p>
<p><span class="snippet" style="font-weight: bold;">Alex is awesome!</span><br><span class="snippet" style="font-weight: bold;">Allison is awesome!</span><br><span class="snippet" style="font-weight: bold;">Ashley is awesome!</span><br><span class="snippet" style="font-weight: bold;">Achel is awesome!</span></p>
<p>Unlike with Lists, the size of an array cannot be changed once created.</p>
<p>I highly recommend reading <a href="https://docs.oracle.com/javase/tutorial/java/nutsandbolts/arrays.html">Arrays</a> (The Java Tutorials).</p>
<p> </p>

null





assignment statement

<p>An assignment statement sets a variable (on the left of the equals sign) to have the value on the right side. Here are some examples:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_java5" style="overflow: auto; width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="java5" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="vertical-align: top;">score = <span style="color: #cc66cc;">100</span><span style="color: #339933;">;</span></span>
<span style="vertical-align: top;">world = getWorld<span style="color: #009900;">(</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></span>
<span style="vertical-align: top;">time = time - <span style="color: #cc66cc;">10</span><span style="color: #339933;">;</span></span><span style="vertical-align: top;"><br></span></pre>
</div>
</div>
</div>
<p> <br>Assignments sometimes also occur in variable declarations.</p>

statements





boolean literal

<p>A boolean literal is a boolean value that appears directly in the source code. The two possible values are <span class="snippet" style="font-weight: bold;">true</span> or <span class="snippet" style="font-weight: bold;">false</span>. The boolean literal <span class="snippet" style="font-weight: bold;">true</span> is used on the right side of the following statement:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_java5" style="overflow: auto; width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="java5" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="vertical-align: top;"><span style="color: #006600; font-weight: bold;">boolean</span> happy = <span style="color: #006600; font-weight: bold;">true</span><span style="color: #339933;">;</span></span></pre>
</div>
</div>
</div>
<p> </p>

null





cast

<p>There are a few different types of casts in Java. The type we have been using is called a downcast, where the programmer specifies a more specific type for an expression than it is currently known to have.</p>
<p>For example, the <span class="snippet" style="font-weight: bold;">getWorld()</span> method of <span class="snippet" style="font-weight: bold;">Actor</span> returns a <span class="snippet" style="font-weight: bold;">World</span>. If we know that it will return a subclass of <span class="snippet" style="font-weight: bold;">World</span>, such as <span class="snippet" style="font-weight: bold;">Bloodstream</span>, we can tell the compiler this by putting the more specific type in parentheses in front of the return value.</p>
<div class="rj_insertcode">
<div class="rj_insertcode_java5" style="width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="java5" style="border-collapse: collapse; width: 100%;">
<div style="background: #dddddd; color: #054b6e; padding: 2px 0px; text-align: center; font: bold italic 12px Verdana, Geneva, Arial, Helvetica, sans-serif;">This code is not legal</div>
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="vertical-align: top;"><span style="color: #666666; font-style: italic;">// This fails, because the return type of getWorld() is World.</span></span>
<span style="vertical-align: top;">Bloodstream bloodstream = getWorld<span style="color: #009900;">(</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></span></pre>
</div>
</div>
</div>
<p> </p>
<div class="rj_insertcode">
<div class="rj_insertcode_java5" style="width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="java5" style="border-collapse: collapse; width: 100%;">
<div style="background: #dddddd; color: #054b6e; padding: 2px 0px; text-align: center; font: bold italic 12px Verdana, Geneva, Arial, Helvetica, sans-serif;">This code is legal</div>
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="vertical-align: top;"><span style="color: #666666; font-style: italic;">// By putting the type Bloodstream in parentheses, we tell the compiler</span></span>
<span style="vertical-align: top;"><span style="color: #666666; font-style: italic;">// that the World returned by getWorld() is really an instance of</span></span>
<span style="vertical-align: top;"><span style="color: #666666; font-style: italic;">// Bloodstream and can be stored in a variable of that type.</span></span>
<span style="vertical-align: top;">Bloodstream bloodstream = <span style="color: #009900;">(</span>Bloodstream<span style="color: #009900;">)</span> getWorld<span style="color: #009900;">(</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></span></pre>
</div>
</div>
</div>
<p> <br>The reason for casting is so we can call a method on the bloodstream that is only defined for the subclass <span class="snippet" style="font-weight: bold;">Bloodstream</span>, not the superclass <span class="snippet" style="font-weight: bold;">World</span>.</p>
<div class="rj_insertcode">
<div class="rj_insertcode_java5" style="width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="java5" style="border-collapse: collapse; width: 100%;">
<div style="background: #dddddd; color: #054b6e; padding: 2px 0px; text-align: center; font: bold italic 12px Verdana, Geneva, Arial, Helvetica, sans-serif;">This code is illegal</div>
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="vertical-align: top;">World world = getWorld<span style="color: #009900;">(</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></span>
<span style="vertical-align: top;"><span style="color: #666666; font-style: italic;">// The compiler rejects the following statement, because World does</span></span>
<span style="vertical-align: top;"><span style="color: #666666; font-style: italic;">// not have an addScore() method.</span></span>
<span style="vertical-align: top;">world.<span style="color: #006633;">addScore</span><span style="color: #009900;">(</span><span style="color: #cc66cc;">20</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></span></pre>
</div>
</div>
</div>
<p> </p>
<div class="rj_insertcode">
<div class="rj_insertcode_java5" style="width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="java5" style="border-collapse: collapse; width: 100%;">
<div style="background: #dddddd; color: #054b6e; padding: 2px 0px; text-align: center; font: bold italic 12px Verdana, Geneva, Arial, Helvetica, sans-serif;">This code is legal</div>
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="vertical-align: top;">Bloodstream bloodstream = <span style="color: #009900;">(</span>Bloodstream<span style="color: #009900;">)</span> getWorld<span style="color: #009900;">(</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></span>
<span style="vertical-align: top;">bloodstream.<span style="color: #006633;">addScore</span><span style="color: #009900;">(</span><span style="color: #cc66cc;">20</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></span></pre>
</div>
</div>
</div>
<p> <br>This is called a downcast because we are moving down in the hierarchy, from a <span class="snippet" style="font-weight: bold;">superclass</span> (<span class="snippet" style="font-weight: bold;">World</span>) to a subclass (<span class="snippet" style="font-weight: bold;">Bloodstream</span>).</p>
<p>If we lied to the compiler, and the <span class="snippet" style="font-weight: bold;">World</span> returned by <span class="snippet" style="font-weight: bold;">getWorld()</span> is not really a <span class="snippet" style="font-weight: bold;">Bloodstream</span>, an error will occur at run-time.</p>
<p>See also <a href="http://www.cs.utexas.edu/~cannata/cs345/Class%20Notes/14%20Java%20Upcasting%20Downcasting.htm">Upcasting, Downcasting</a>.</p>

null





chaining

<p>The term chaining refers to when multiple field accesses or method calls appear within a single statement, such as:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_java5" style="overflow: auto; width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="java5" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="vertical-align: top;"><span style="color: #006600; font-weight: bold;">int</span> width = getWorld<span style="color: #009900;">(</span><span style="color: #009900;">)</span>.<span style="color: #006633;">getWidth</span><span style="color: #009900;">(</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></span></pre>
</div>
</div>
</div>
<p><br>Without chaining, two statements would be required:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_java5" style="overflow: auto; width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="java5" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="vertical-align: top;">World world = getWorld<span style="color: #009900;">(</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></span>
<span style="vertical-align: top;"><span style="color: #006600; font-weight: bold;">int</span> width = world.<span style="color: #006633;">getWidth</span><span style="color: #009900;">(</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></span></pre>
</div>
</div>
</div>
<p> </p>

null





class

<p>Programs in object-oriented programming languages, such as Java, are divided into class, which consist of fields, constructors, and methods. By convention, class names are written in UpperCamelCase.</p>
<p>Every class can have one superclass and any number of subclasses (including zero).</p>
<p>There is also a keyword <span class="snippet" style="font-weight: bold;">class</span> that is used when declaring a new class:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_java5" style="width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="java5" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="vertical-align: top;"><span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000000; font-weight: bold;">class</span> Wombat <span style="color: #000000; font-weight: bold;">extends</span> Actor</span>
<span style="vertical-align: top;"><span style="color: #009900;">{</span></span>
<span style="vertical-align: top;">   <span style="color: #666666; font-style: italic;">// Fields (instance variables, static variables and constants)</span></span>
<span style="vertical-align: top;">   <span style="color: #666666; font-style: italic;">// are declared at the top of a class.</span></span>
<span style="vertical-align: top;"> </span>
<span style="vertical-align: top;">   <span style="color: #666666; font-style: italic;">// Next come constructors.</span></span>
<span style="vertical-align: top;"> </span>
<span style="vertical-align: top;">   <span style="color: #666666; font-style: italic;">// Finally, there are methods.</span></span>
<span style="vertical-align: top;"><span style="color: #009900;">}</span></span></pre>
</div>
</div>
</div>
<p> <br>In Java, classes consist of fields, constructors, and methods. (While the language permits them to be in any order, convention strongly dictates this order.)</p>
<p>See information on classes at:</p>
<ul>
<li><a href="https://docs.oracle.com/javase/tutorial/java/javaOO/classdecl.html">The Java Tutorial</a></li>
<li><a href="https://www.cis.upenn.edu/~matuszek/General/JavaSyntax/classes.html">U Penn</a></li>
</ul>

keywords





class hierarchy

<p>The class hierarchy shows the subclass-superclass relations among classes. If a class does not explicitly extend another class, it automatically extends <span class="snippet" style="font-weight: bold;"><a href="http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html">Object</a></span>, the base Java class.</p>
<p>Class hierarchies are drawn with superclasses above subclasses. (Think of Superman up in the sky and a submarine down in the water.)</p>
<p>See <a href="https://docs.oracle.com/javase/tutorial/java/IandI/subclasses.html">The Java Tutorials</a>.</p>
<p> </p>

null





class method

<p>See static method.</p>

null





compiler

<p>A compiler is a tool for turning programs written in high-level languages, such as Java, into the machine language that computers natively understand.</p>
<p>The first compiler was written by <a href="https://en.wikipedia.org/wiki/Grace_Hopper">Grace Murray Hopper</a>.</p>
<p>See also <a href="https://en.wikipedia.org/wiki/Compiler">Compilers (Wikipedia)</a>.</p>
<p>For very large programs, it takes a long time for the compiler to run.</p>
<p><img src="http://imgs.xkcd.com/comics/compiling.png" alt="xkcd cartoon" width="413" height="360" /></p>
<p> </p>

null





concrete class

<p>A concrete class is a class that can be instantiated. This is in contrast to abstract classes, which are declared with the keyword "<span class="snippet" style="font-weight: bold;">abstract</span>" and may contain abstract methods.</p>

null





concrete subclass

<p>See concrete class.</p>

null





constant

<p>Similar to a static variable but its value cannot be changed. Constants should be defined at the top of a class (outside of any constructors or methods) with the keywords <span class="snippet" style="font-weight: bold;">static</span> and <span class="snippet" style="font-weight: bold;">final</span>. Here is a sample declaration:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_java5" style="width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="java5" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="vertical-align: top;"><span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000000; font-weight: bold;">static</span> <span style="color: #000000; font-weight: bold;">final</span> <span style="color: #006600; font-weight: bold;">int</span> NUM_PLAYERS = <span style="color: #cc66cc;">10</span><span style="color: #339933;">;</span></span></pre>
</div>
</div>
</div>
<p><br>Note that all of the letters are capitalized, and words are separated by underscores.</p>
<p>Of course, constants can also be private:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_java5" style="width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="java5" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="vertical-align: top;"><span style="color: #000000; font-weight: bold;">private</span> <span style="color: #000000; font-weight: bold;">static</span> <span style="color: #000000; font-weight: bold;">final</span> <span style="color: #006600; font-weight: bold;">int</span> WIDTH = <span style="color: #cc66cc;">600</span><span style="color: #339933;">;</span></span></pre>
</div>
</div>
</div>
<p><br>A constant is a type of a field.</p>

null





constructor

<p>A constructor is used for creating new instances of a class. It has some similarities with a method, but it has no return type, and its name is always the same as the class in which it is declared. There can be multiple constructors for a given class, as long as each has a different parameter list.</p>
<p>Often, instance variables are assigned their values in a constructor. Here is an example:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_java5" style="width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="java5" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="vertical-align: top;"><span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000000; font-weight: bold;">class</span> Person</span>
<span style="vertical-align: top;"><span style="color: #009900;">{</span></span>
<span style="vertical-align: top;">    <span style="color: #000000; font-weight: bold;">private</span> <span style="color: #003399; font-weight: bold;">String</span> name<span style="color: #339933;">;</span></span>
<span style="vertical-align: top;">    <span style="color: #000000; font-weight: bold;">private</span> <span style="color: #006600; font-weight: bold;">int</span> age<span style="color: #339933;">;</span></span>
<span style="vertical-align: top;"> </span>
<span style="vertical-align: top;">    <span style="color: #000000; font-weight: bold;">public</span> Person<span style="color: #009900;">(</span><span style="color: #003399; font-weight: bold;">String</span> newName<span style="color: #009900;">)</span></span>
<span style="vertical-align: top;">    <span style="color: #009900;">{</span></span>
<span style="vertical-align: top;">        name = newName<span style="color: #339933;">;</span></span>
<span style="vertical-align: top;">    <span style="color: #009900;">}</span></span>
<span style="vertical-align: top;"><span style="color: #009900;">}</span></span></pre>
</div>
</div>
</div>
<p><br>If no constructors are declared for a class, Java creates a no-args constructor.</p>
<p>All constructors implicitly call a constructor of their superclass. The keyword super can be used to control which of the superclass' constructors are called. If there is no explicit call to super(), the no-args constructor of the superclass is called.</p>
<p>Here is an example:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_java5" style="width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="java5" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="vertical-align: top;"><span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000000; font-weight: bold;">class</span> DiceWorld <span style="color: #000000; font-weight: bold;">extends</span> World</span>
<span style="vertical-align: top;"><span style="color: #009900;">{</span></span>
<span style="vertical-align: top;">    <span style="color: #000000; font-weight: bold;">public</span> DiceWorld<span style="color: #009900;">(</span><span style="color: #009900;">)</span></span>
<span style="vertical-align: top;">    <span style="color: #009900;">{</span>    </span>
<span style="vertical-align: top;">        <span style="color: #666666; font-style: italic;">// Create a new world with 600x400 cells with a cell size of 1x1 pixels.</span></span>
<span style="vertical-align: top;">        <span style="color: #000000; font-weight: bold;">super</span><span style="color: #009900;">(</span><span style="color: #cc66cc;">600</span>, <span style="color: #cc66cc;">400</span>, <span style="color: #cc66cc;">1</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>   </span>
<span style="vertical-align: top;">    <span style="color: #009900;">}</span></span>
<span style="vertical-align: top;"><span style="color: #009900;">}</span></span></pre>
</div>
</div>
</div>
<p> </p>
<p>See also the pages on constructors at:</p>
<ul>
<li><a href="https://docs.oracle.com/javase/tutorial/java/javaOO/constructors.html">The Java Tutorials</a></li>
<li><a href="https://www.cis.upenn.edu/~matuszek/General/JavaSyntax/constructors.html">U Penn</a></li>
</ul>
<p> </p>

null





conventions

<p>Coding conventions are policies that Java programmers agree to for their mutual benefit. While they are not enforced by the compiler, they are nonetheless important.</p>
<p><strong>Naming</strong></p>
<ul>
<li>Class names should be nouns formatted in UpperCamelCase, such as <span class="snippet" style="font-weight: bold;">Actor</span> and <span class="snippet" style="font-weight: bold;">World</span>.</li>
<li>Method names should be verbs (with certain idiomatic exceptions) formatted in lowerCamelCase, such as <span class="snippet" style="font-weight: bold;">eatLeaf</span> and <span class="snippet" style="font-weight: bold;">move</span>.</li>
<li>The names of variables should usually be nouns formatted in lowerCamelCase, such as <span class="snippet" style="font-weight: bold;">size</span>, <span class="snippet" style="font-weight: bold;">stability</span>, and <span class="snippet" style="font-weight: bold;">name</span>.</li>
<li>The names of constants should usually be nouns formatted in ALL_CAPS, such as <span class="snippet" style="font-weight: bold;">HEIGHT</span> and <span class="snippet" style="font-weight: bold;">WIDTH</span>.</li>
<li>Magic numbers should rarely, if ever, appear in code. They should either be replaced by constants, retrieved via method calls (such as <span class="snippet" style="font-weight: bold;">getWidth()</span>), or, in the worst case, have comments explaining their meaning.</li>
</ul>
<p><strong>Formatting</strong></p>
<ul>
<li>Lines should be no longer than 80 characters.</li>
<li>There should be a single blank line before (1) the javadoc for a public method or (2) the first line of a non-public method.</li>
<li>Otherwise, blank lines should be used thoughtfully to separate regions of related code.</li>
<li>There should almost never be any code following a left brace on the same line. Exceptions may be made for if-else statements.</li>
<li>There should be a single space on either side of an operator, such as <span class="snippet" style="font-weight: bold;">+</span>.</li>
<li>There should be no space before a comma, period, or semicolon.</li>
<li>There should be no space between a method name and the following left parenthesis.</li>
<li>There should always be space before a left brace.</li>
</ul>
<p><strong>Comments</strong></p>
<ul>
<li>Every class must be preceded by javadoc containing a description, <span class="snippet" style="font-weight: bold;">@author</span>, and <span class="snippet" style="font-weight: bold;">@version</span>.</li>
<li>All public constructors, methods, and fields should be preceded by javadoc. (Follow the link for the javadoc style rules.)</li>
<li>Information relevant to people reading, maintaining, or modifying the code should appear in comments starting with two slashes (<span class="snippet" style="font-weight: bold;">//</span>).</li>
</ul>
<p><strong>Safety</strong></p>
<ul>
<li>Braces should always be used around <span class="snippet" style="font-weight: bold;">if</span>, <span class="snippet" style="font-weight: bold;">else</span>, <span class="snippet" style="font-weight: bold;">for</span>, and <span class="snippet" style="font-weight: bold;">while</span> bodies.</li>
<li>You are encouraged to put the annotation <span class="snippet" style="font-weight: bold;">@Override</span> before methods that override (redefine) methods declared in their superclass. (I am not requiring it, because we have gotten into the habit of leaving it our for <span class="snippet" style="font-weight: bold;">act()</span>.)</li>
</ul>
<p><span class="snippet" style="font-weight: bold;">Miscellaneous</span></p>
<ul>
<li>Constructors, fields, and methods should be private unless there is a need for them to be protected or public.</li>
<li>Static fields and methods should be referenced by the class, not an instance. For example, you would write <span class="snippet" style="font-weight: bold;">Color.RED</span>, not <span class="snippet" style="font-weight: bold;">someColor.RED</span>.</li>
</ul>
<p>For more, see the <a href="https://google.github.io/styleguide/javaguide.html">Google Java Style Guide</a>. If you've read this far, enjoy <a href="http://hackles.org/cgi-bin/archives.pl?request=98">this cartoon</a>.</p>
<p> </p>

null





declaration

<p>A declaration tells the compiler of the existence of a new variable, class, method, etc. In Java, it is possible to declare a variable without explicitly giving it a value. See variable declaration.</p>

null





default constructor

<p>See no-args constructor.</p>

null





documentation

<p>See API.</p>

null





Documentation view

<p>Greenfoot editor windows have two modes, <span class="mac" style="color: #3366ff;">Source Code</span> and <span class="mac" style="color: #3366ff;">Documentation</span>. You can switch between them using the dropdown menu at the upper right of the window. You are not able to see the source code for certain classes that are part of Greenfoot, such as <span class="snippet" style="font-weight: bold;">Actor</span>.</p>

Greenfoot





downcast

<p>See cast.</p>

null





enum

<p>The keyword <span class="snippet" style="font-weight: bold;">enum</span> is used when declaring an enumerated type.</p>

keywords





enumerated type

<p>An enumerated type is limited to a fixed number of values. An example is:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_java5" style="overflow: auto; width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="java5" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="vertical-align: top;"><span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000000; font-weight: bold;">enum</span> Day <span style="color: #009900;">{</span></span>
<span style="vertical-align: top;">    SUNDAY, MONDAY, TUESDAY, WEDNESDAY,</span>
<span style="vertical-align: top;">    THURSDAY, FRIDAY, SATURDAY </span>
<span style="vertical-align: top;"><span style="color: #009900;">}</span></span></pre>
</div>
</div>
</div>
<p> <br>Variables of this type may only one of these 7 values.</p>
<p>Enumerated types are themselves classes, and there are many useful methods in <a href="http://docs.oracle.com/javase/7/docs/api/java/lang/Enum.html">java.lang.Enum</a>, such as:</p>
<ul>
<li><span class="snippet" style="font-weight: bold;">String name()</span>, which returns the name of the value (such as <span class="snippet" style="font-weight: bold;">"SUNDAY"</span>).</li>
<li><span class="snippet" style="font-weight: bold;">int ordinal()</span>, which returns the index of the value (such as <span class="snippet" style="font-weight: bold;">0</span> for <span class="snippet" style="font-weight: bold;">SUNDAY</span>)</li>
</ul>
<p>See also <a href="http://docs.oracle.com/javase/tutorial/java/javaOO/enum.html">Enum Types</a> in the Java Tutorials, although it goes into far more detail than necessary for our class.</p>
<p> </p>

null





exclusive

<p>A range of numbers is exclusive if the bounds are excluded. For example, the range 0 to 5, exclusive, consists of 1, 2, 3, 4.  Contrast with inclusive.</p>

null





expression

<p>An expression is something that has a value. Some expressions are:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_java5" style="overflow: auto; width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="java5" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="vertical-align: top;"><span style="color: #cc66cc;">1</span> + <span style="color: #cc66cc;">2</span></span>
<span style="vertical-align: top;"><span style="color: #cc66cc;">5</span></span>
<span style="vertical-align: top;"><span style="color: #0000ff;">"Hello, world!"</span></span>
<span style="vertical-align: top;">getWorld<span style="color: #009900;">(</span><span style="color: #009900;">)</span></span></pre>
</div>
</div>
</div>
<p> <br>The value of the last expression is whatever was returned by the method call.</p>
<p>See the first section of <a href="https://docs.oracle.com/javase/tutorial/java/nutsandbolts/expressions.html">Expressions, Statements, and Blocks</a> (The Java Tutorials).</p>

null





expression statement

<p>An expression can be made into a statement by ending it with a semicolon. This is rarely useful. Here are some examples of expression statements:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_java5" style="overflow: auto; width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="java5" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="vertical-align: top;"><span style="color: #cc66cc;">5</span><span style="color: #339933;">;</span>                 <span style="color: #666666; font-style: italic;">// This is a legal, but useless, statement.</span></span>
<span style="vertical-align: top;">getLeavesEaten<span style="color: #009900;">(</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>  <span style="color: #666666; font-style: italic;">// This does nothing with the return value.</span></span></pre>
</div>
</div>
</div>
<p> <br>For more see the second section of <a href="https://docs.oracle.com/javase/tutorial/java/nutsandbolts/expressions.html">Expressions, Statements, and Blocks</a> (The Java Tutorial).</p>

statements





extends

<p>The keyword <span class="snippet" style="font-weight: bold;">extends</span> is used to declare a class that is a subclass of another (superclass).</p>
<p>For examples, see the entires on class and subclass.</p>

keywords





field

<p>An instance variable, a static variable, or a constant</p>

null





final

<p>The keyword <span class="snippet" style="font-weight: bold;">final </span>can be applied in several different ways.</p>
<p>When used in (what would otherwise be) a variable declaration, it indicates that the "variable" is actually a constant (i.e., its value cannot be changed). You are familiar with this usage.</p>
<p>When used in a method declaration, it means that subclasses cannot override the method. </p>
<p>When used in a class declaration, it means that the class may not be extended (may not have subclasses). This usage is less common, and you will not see it in this course.</p>

keywords





for-each loop

<p>A for-each loop allows one or more statements to be applied to every element in a List. Its format is:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_java5" style="width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="java5" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="vertical-align: top;"><span style="color: #000000; font-weight: bold;">for</span> <span style="color: #009900;">(</span><span style="color: #339933;">&lt;</span>ElementType<span style="color: #339933;">&gt;</span> <span style="color: #339933;">&lt;</span>name<span style="color: #339933;">&gt;</span> : <span style="color: #339933;">&lt;</span>list<span style="color: #339933;">&gt;</span><span style="color: #009900;">)</span></span>
<span style="vertical-align: top;"><span style="color: #009900;">{</span></span>
<span style="vertical-align: top;">   <span style="color: #339933;">&lt;</span>one or more statements<span style="color: #339933;">&gt;</span></span>
<span style="vertical-align: top;"><span style="color: #009900;">}</span></span></pre>
</div>
</div>
</div>
<p><br>For example, this code makes every <span class="snippet" style="font-weight: bold;">Wombat</span> in the world eat a leaf:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_java5" style="width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="java5" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="vertical-align: top;">List<span style="color: #339933;">&lt;</span>Wombat<span style="color: #339933;">&gt;</span> wombats = getWorld<span style="color: #009900;">(</span><span style="color: #009900;">)</span>.<span style="color: #006633;">getObjects</span><span style="color: #009900;">(</span>Wombat.<span style="color: #000000; font-weight: bold;">class</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></span>
<span style="vertical-align: top;"><span style="color: #000000; font-weight: bold;">for</span> <span style="color: #009900;">(</span>Wombat wombat : wombats<span style="color: #009900;">)</span></span>
<span style="vertical-align: top;"><span style="color: #009900;">{</span></span>
<span style="vertical-align: top;">    wombat.<span style="color: #006633;">eatLeaf</span><span style="color: #009900;">(</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></span>
<span style="vertical-align: top;"><span style="color: #009900;">}</span></span></pre>
</div>
</div>
</div>
<p> <br>Another example can be found in the glossary entry for List.</p>
<p>See also iteration.</p>

null





for-loop

<p>A for-loop is a control flow structure for executing code multiple times.</p>
<p>Its parts are:</p>
<ul>
<li>initial expression, such as<span class="snippet" style="font-weight: bold;"> int i = 0</span></li>
<li>termination expression, such as<span class="snippet" style="font-weight: bold;"> i &lt; 10</span></li>
<li>increment expression, such as <span class="snippet" style="font-weight: bold;">i++</span></li>
<li>body: a block of statements</li>
</ul>
<p>There is a <em>loop variable</em>, <span class="snippet" style="font-weight: bold;">i</span> in this example, whose value varies over the course of execution. Its initial value is set in the initial expression. At the beginning of each <em>iteration</em>, the termination condition is checked. If it is false, the loop ends. Otherwise, the body is run; the body optionally references i. Then, the increment expression is run, and the next iteration starts.</p>
<p>Here is a complete loop, which prints the numbers from 0 to 9:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_java5" style="width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="java5" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="vertical-align: top;"><span style="color: #000000; font-weight: bold;">for</span> <span style="color: #009900;">(</span><span style="color: #006600; font-weight: bold;">int</span> i = <span style="color: #cc66cc;">0</span><span style="color: #339933;">;</span> i <span style="color: #339933;">&lt;</span> <span style="color: #cc66cc;">10</span><span style="color: #339933;">;</span> i++<span style="color: #009900;">)</span></span>
<span style="vertical-align: top;"><span style="color: #009900;">{</span></span>
<span style="vertical-align: top;">    <span style="color: #003399; font-weight: bold;">System</span>.<span style="color: #006633;">out</span>.<span style="color: #006633;">println</span><span style="color: #009900;">(</span>i<span style="color: #009900;">)</span><span style="color: #339933;">;</span></span>
<span style="vertical-align: top;"><span style="color: #009900;">}</span></span></pre>
</div>
</div>
</div>
<p> <br>Note that it is permissible and sometimes desirable for the so-called "increment expression" to decrement the loop variable.</p>
<p>See <a href="https://docs.oracle.com/javase/tutorial/java/nutsandbolts/for.html">The for statement</a> (The Java Tutorials).</p>
<p> </p>

statements





formal parameter

<p>A parameter that appears in a signature. Consider the following declaration:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_java5" style="overflow: auto; width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="java5" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="vertical-align: top;"><span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000000; font-weight: bold;">static</span> <span style="color: #006600; font-weight: bold;">int</span> square<span style="color: #009900;">(</span><span style="color: #006600; font-weight: bold;">int</span> x<span style="color: #009900;">)</span></span>
<span style="vertical-align: top;"><span style="color: #009900;">{</span></span>
<span style="vertical-align: top;">    <span style="color: #000000; font-weight: bold;">return</span> x <span style="color: #339933;">*</span> x<span style="color: #339933;">;</span></span>
<span style="vertical-align: top;"><span style="color: #009900;">}</span></span></pre>
</div>
</div>
</div>
<p> <br>The formal parameter is <span class="snippet" style="font-weight: bold;">x</span>. Its type is <span class="snippet" style="font-weight: bold;">int</span>.</p>
<p>Contrast with actual parameter.</p>
<p> </p>

null





getter

<p>A getter is a method that returns the value of a field. Usually, it is an instance method accessing an instance variable.</p>
<p>Here is an example:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_java5" style="width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="java5" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="vertical-align: top;"><span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000000; font-weight: bold;">class</span> Animal</span>
<span style="vertical-align: top;"><span style="color: #009900;">{</span></span>
<span style="vertical-align: top;">    <span style="color: #000000; font-weight: bold;">private</span> <span style="color: #003399; font-weight: bold;">String</span> name<span style="color: #339933;">;</span></span>
<span style="vertical-align: top;"> </span>
<span style="vertical-align: top;">    <span style="color: #008000; font-style: italic; font-weight: bold;">/**</span>
<span style="vertical-align: top;">     * Constructs a new animal with the given name.</span>
<span style="vertical-align: top;">     *</span>
<span style="vertical-align: top;">     * @param newName the name of the new animal</span>
<span style="vertical-align: top;">     */</span></span>
<span style="vertical-align: top;">    <span style="color: #000000; font-weight: bold;">public</span> Animal<span style="color: #009900;">(</span><span style="color: #003399; font-weight: bold;">String</span> newName<span style="color: #009900;">)</span></span>
<span style="vertical-align: top;">    <span style="color: #009900;">{</span></span>
<span style="vertical-align: top;">        name = newName<span style="color: #339933;">;</span></span>
<span style="vertical-align: top;">    <span style="color: #009900;">}</span></span>
<span style="vertical-align: top;"> </span>
<span style="vertical-align: top;">    <span style="color: #008000; font-style: italic; font-weight: bold;">/**</span>
<span style="vertical-align: top;">     * Gets the name.</span>
<span style="vertical-align: top;">     *</span>
<span style="vertical-align: top;">     * @return the name</span>
<span style="vertical-align: top;">     */</span></span>
<span style="vertical-align: top;">    <span style="color: #000000; font-weight: bold;">public</span> <span style="color: #003399; font-weight: bold;">String</span> getName<span style="color: #009900;">(</span><span style="color: #009900;">)</span></span>
<span style="vertical-align: top;">    <span style="color: #009900;">{</span></span>
<span style="vertical-align: top;">        <span style="color: #000000; font-weight: bold;">return</span> name<span style="color: #339933;">;</span></span>
<span style="vertical-align: top;">    <span style="color: #009900;">}</span></span>
<span style="vertical-align: top;"><span style="color: #009900;">}</span></span></pre>
</div>
</div>
</div>
<p> <br>Sometimes, getters contain additional code, as discussed in the November 16/17 lecture.</p>

null





GUI

<p>A graphical user interface (GUI) consists primarily of images and is often navigated with a mouse, in contrast with a text-based interface, which just uses text and the keyboard. When I refer to the Greenfoot GUI, I mean the main window, which displays the world (not the source) code and its contents.</p>

Greenfoot





if-statement

<p>An if-statement enables code to be executed only if a condition is true (or false). One format is:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_java5" style="width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="java5" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="vertical-align: top;"><span style="color: #000000; font-weight: bold;">if</span> <span style="color: #009900;">(</span> condition <span style="color: #009900;">)</span></span>
<span style="vertical-align: top;"><span style="color: #009900;">{</span></span>
<span style="vertical-align: top;">    if-body</span>
<span style="vertical-align: top;"><span style="color: #009900;">}</span> <span style="color: #000000; font-weight: bold;">else</span> <span style="color: #009900;">{</span></span>
<span style="vertical-align: top;">    else-body</span>
<span style="vertical-align: top;"><span style="color: #009900;">}</span></span></pre>
</div>
</div>
</div>
<p> <br>The condition must have a boolean value. If it is <span class="snippet" style="font-weight: bold;">true</span>, the statements comprising the if-body are executed; if it is <span class="snippet" style="font-weight: bold;">false</span>, the else-body is executed. The else-clause (<span class="snippet" style="font-weight: bold;">else</span> keyword and else-body) may be omitted.</p>
<p>If-statments can have any number of else-if clauses:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_java5" style="width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="java5" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="vertical-align: top;"><span style="color: #000000; font-weight: bold;">if</span> <span style="color: #009900;">(</span> condition1 <span style="color: #009900;">)</span></span>
<span style="vertical-align: top;"><span style="color: #009900;">{</span></span>
<span style="vertical-align: top;">    if-body-<span style="color: #cc66cc;">1</span></span>
<span style="vertical-align: top;"><span style="color: #009900;">}</span></span>
<span style="vertical-align: top;"><span style="color: #000000; font-weight: bold;">else</span> <span style="color: #000000; font-weight: bold;">if</span> <span style="color: #009900;">(</span> condition2 <span style="color: #009900;">)</span></span>
<span style="vertical-align: top;"><span style="color: #009900;">{</span></span>
<span style="vertical-align: top;">    if-body-<span style="color: #cc66cc;">2</span></span>
<span style="vertical-align: top;"><span style="color: #009900;">}</span></span>
<span style="vertical-align: top;"><span style="color: #000000; font-weight: bold;">else</span> <span style="color: #000000; font-weight: bold;">if</span> <span style="color: #009900;">(</span> condition3 <span style="color: #009900;">)</span></span>
<span style="vertical-align: top;"><span style="color: #009900;">{</span></span>
<span style="vertical-align: top;">    if-body-<span style="color: #cc66cc;">3</span></span>
<span style="vertical-align: top;"><span style="color: #009900;">}</span></span>
<span style="vertical-align: top;">:</span>
<span style="vertical-align: top;"><span style="color: #000000; font-weight: bold;">else</span></span>
<span style="vertical-align: top;"><span style="color: #009900;">{</span></span>
<span style="vertical-align: top;">    else-body</span>
<span style="vertical-align: top;"><span style="color: #009900;">}</span></span></pre>
</div>
</div>
</div>
<p><br>The if-statement ends after completing the body following the first condition that is true. Again, the else-clause is optional.</p>
<p>For examples, see <a href="https://docs.oracle.com/javase/tutorial/java/nutsandbolts/if.html">The Java Tutorials</a>.</p>

statements





inclusive

<p>A range of numbers is inclusive if both bounds are included. For example, the range 0 to 5, inclusive, consists of 0, 1, 2, 3, 4, and 5.  Contrast with exclusive.</p>

null





inheritance

<p>Inheritance refers to when a subclass gets the fields and methods of its superclass. This is what allows us to call move() on wombats (for example) that we create, since they inherit that method from Actor.</p>
<p>An alternative to inheritance is when a subclass overrides a method of its superclass.</p>
<p>See also <a href="https://docs.oracle.com/javase/tutorial/java/IandI/subclasses.html">The Java Tutorials</a>.</p>
<p> </p>

null





initialize

<p>Initialization refers to giving a variable its initial value. For example, the following statement declares the instance variable <span class="snippet" style="font-weight: bold;">time</span> (see variable declaration) and initializes it to 1000:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_java5" style="width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="java5" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="vertical-align: top;"><span style="color: #000000; font-weight: bold;">private</span> <span style="color: #006600; font-weight: bold;">int</span> time = <span style="color: #cc66cc;">1000</span><span style="color: #339933;">;</span></span></pre>
</div>
</div>
</div>
<p> </p>

null





instance method

<p>An instance method is a method that must be called on an instance of a class. By default, methods are instance, unless they are declared with the keyword <span class="snippet" style="font-weight: bold;">static</span>, in which case they are static methods.</p>
<p>Instance methods can refer to instance variables. Here is one example:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_java5" style="overflow: auto; width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="java5" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="vertical-align: top;"><span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000000; font-weight: bold;">class</span> <span style="color: #003399; font-weight: bold;">Key</span> <span style="color: #000000; font-weight: bold;">extends</span> Actor</span>
<span style="vertical-align: top;"><span style="color: #009900;">{</span></span>
<span style="vertical-align: top;">    <span style="color: #000000; font-weight: bold;">private</span> GreenfootSound sound<span style="color: #339933;">;</span></span>
<span style="vertical-align: top;">    <span style="color: #000000; font-weight: bold;">private</span> <span style="color: #003399; font-weight: bold;">String</span> name<span style="color: #339933;">;</span></span>
<span style="vertical-align: top;"> </span>
<span style="vertical-align: top;">    <span style="color: #000000; font-weight: bold;">public</span> <span style="color: #003399; font-weight: bold;">Key</span><span style="color: #009900;">(</span><span style="color: #003399; font-weight: bold;">String</span> newName<span style="color: #009900;">)</span></span>
<span style="vertical-align: top;">    <span style="color: #009900;">{</span></span>
<span style="vertical-align: top;">        name = newName<span style="color: #339933;">;</span></span>
<span style="vertical-align: top;">        sound = <span style="color: #000000; font-weight: bold;">new</span> GreenfootSound<span style="color: #009900;">(</span>name + <span style="color: #0000ff;">".wav"</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></span>
<span style="vertical-align: top;">    <span style="color: #009900;">}</span></span>
<span style="vertical-align: top;"> </span>
<span style="vertical-align: top;">    <span style="color: #000000; font-weight: bold;">public</span> <span style="color: #006600; font-weight: bold;">void</span> playSound<span style="color: #009900;">(</span><span style="color: #009900;">)</span></span>
<span style="vertical-align: top;">    <span style="color: #009900;">{</span></span>
<span style="vertical-align: top;">        sound.<span style="color: #006633;">play</span><span style="color: #009900;">(</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></span>
<span style="vertical-align: top;">    <span style="color: #009900;">}</span></span>
<span style="vertical-align: top;"><span style="color: #009900;">}</span></span></pre>
</div>
</div>
</div>
<p> <br>Because <span class="snippet" style="font-weight: bold;">playSound()</span> is declared without <span class="snippet" style="font-weight: bold;">static</span>, it is an instance method. It has to be an instance method because it references an instance variable (<span class="snippet" style="font-weight: bold;">sound</span>).</p>
<p> </p>

null





instance variable

<div style="text-align: left;">
<p>A variable that every instance of a class has its own copy of. For example, in the musical keyboard scenario, every <span class="snippet" style="font-weight: bold;">Key</span> had its own variable named <span class="snippet" style="font-weight: bold;">sound</span> of type <span class="snippet" style="font-weight: bold;">GreenfootSound</span>. Similarly every human being has their own name.</p>
<p>Like other fields, instance variables have visibility modifiers.</p>
<p>An instance variable declaration consists of:</p>
<ul>
<li>a visibility modifier</li>
<li>a type</li>
<li>a name</li>
</ul>
<p>An example is:</p>
<p><span class="snippet" style="font-weight: bold;">private GreenfootSound sound;</span></p>
</div>

null





instantiation

<p>The word "instantiation" means "to create an instance [of]" or "construction". For example, the following statement declares a variable of type <span class="snippet" style="font-weight: bold;">Leaf</span> and makes it point to a new instance of <span class="snippet" style="font-weight: bold;">Leaf</span>:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_java5" style="overflow: auto; width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="java5" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="vertical-align: top;">Leaf leaf = <span style="color: #000000; font-weight: bold;">new</span> Leaf<span style="color: #009900;">(</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></span></pre>
</div>
</div>
</div>
<p> <br>We can say that we have instantiating a <span class="snippet" style="font-weight: bold;">Leaf</span>.</p>
<p>Note that a class is instantiated with the keyword <span class="snippet" style="font-weight: bold;">new</span> and a call to the constructor.</p>

null





interface

<p>For the purposes of this class, an interface is a fully abstract class; i.e., a class that declares abstract methods and does not have any non-abstract methods.  The class <span class="snippet" style="font-weight: bold;">java.util.List&lt;E&gt;</span> is an interface.</p>

null





iteration

<p>An iteration is a single pass through a loop body. (See <a href="http://www.merriam-webster.com/dictionary/iteration">dictionary definition</a>.) Here are some examples of how the word might be used when discussing this loop:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_java5" style="overflow: auto; width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="java5" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="vertical-align: top;"><span style="color: #003399; font-weight: bold;">System</span>.<span style="color: #006633;">out</span>.<span style="color: #006633;">println</span><span style="color: #009900;">(</span><span style="color: #0000ff;">"Reasons I like CS 63: "</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></span>
<span style="vertical-align: top;"><span style="color: #000000; font-weight: bold;">for</span> <span style="color: #009900;">(</span><span style="color: #006600; font-weight: bold;">int</span> i = <span style="color: #cc66cc;">0</span><span style="color: #339933;">;</span> i <span style="color: #339933;">&lt;</span> <span style="color: #cc66cc;">10</span><span style="color: #339933;">;</span> i++<span style="color: #009900;">)</span></span>
<span style="vertical-align: top;"><span style="color: #009900;">{</span></span>
<span style="vertical-align: top;">  <span style="color: #003399; font-weight: bold;">System</span>.<span style="color: #006633;">out</span>.<span style="color: #006633;">println</span><span style="color: #009900;">(</span>i + <span style="color: #0000ff;">". The TAs are awesome!"</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></span>
<span style="vertical-align: top;"><span style="color: #009900;">}</span></span></pre>
</div>
</div>
</div>
<p> </p>
<ul>
<li>"On each iteration of the loop, a call is made to <span class="snippet" style="font-weight: bold;">System.out.println()</span>.</li>
<li>"There are 10 iterations of the loop."</li>
<li>"The loop iterates over the values from 0 to 9."</li>
</ul>
<p>Consider also this for-each loop:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_java5" style="overflow: auto; width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="java5" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="vertical-align: top;">List<span style="color: #339933;">&lt;</span>Actor<span style="color: #339933;">&gt;</span> actors = getWorld<span style="color: #009900;">(</span><span style="color: #009900;">)</span>.<span style="color: #006633;">getObjects</span><span style="color: #009900;">(</span>Actor.<span style="color: #000000; font-weight: bold;">class</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></span>
<span style="vertical-align: top;"><span style="color: #000000; font-weight: bold;">for</span> <span style="color: #009900;">(</span>Actor actor : actors<span style="color: #009900;">)</span></span>
<span style="vertical-align: top;"><span style="color: #009900;">{</span></span>
<span style="vertical-align: top;">    <span style="color: #000000; font-weight: bold;">if</span> <span style="color: #009900;">(</span>actor.<span style="color: #006633;">isAtEdge</span><span style="color: #009900;">(</span><span style="color: #009900;">)</span><span style="color: #009900;">)</span></span>
<span style="vertical-align: top;">    <span style="color: #009900;">{</span></span>
<span style="vertical-align: top;">        actor.<span style="color: #006633;">turn</span><span style="color: #009900;">(</span><span style="color: #cc66cc;">180</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></span>
<span style="vertical-align: top;">    <span style="color: #009900;">}</span></span>
<span style="vertical-align: top;"><span style="color: #009900;">}</span></span></pre>
</div>
</div>
</div>
<p> <br>One might say:</p>
<ul>
<li>"The loop iterates over all of the actors, turning around any that are at an edge."</li>
</ul>
<p> </p>
<p> </p>

null





javadoc

<nolink>
<p>The Java Software Development Kit comes with a tool named "javadoc" for converting comments within a Java program into HTML documentation.</p>
<p>The term "javadoc" is also used to refer to comments that are processed by the tool. Programmers should write javadoc comments for all public classes, fields, methods, and constructors.</p>
<p>The first sentence of a javadoc comment, which may be a fragment, should provide a summary. Later sentences, which must be full sentences, provide additional detail. Javadoc comments should only include information needed by the caller, not information about the implementation.</p>
<p>We use the following tags for class-level javadoc:</p>
<ul>
<li><span class="snippet" style="font-weight: bold;">@author</span></li>
<li><span class="snippet" style="font-weight: bold;">@version</span></li>
</ul>
<p>We use the following tags for methods:</p>
<ul>
<li><span class="snippet" style="font-weight: bold;">@param</span></li>
<li><span class="snippet" style="font-weight: bold;">@return</span> unless the method is <span class="snippet" style="font-weight: bold;">void</span></li>
</ul>
<p>Always view your javadoc comments in <span class="mac" style="color: #3366ff;">Documentation view</span> to proofread them.</p>
<p>Here are some examples of proper javadoc:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_java5" style="width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="java5" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="vertical-align: top;"><span style="color: #008000; font-style: italic; font-weight: bold;">/**</span>
<span style="vertical-align: top;"> * Checks whether this Actor is at the edge of the world.</span>
<span style="vertical-align: top;"> *</span>
<span style="vertical-align: top;"> * @return true if the Actor is at the edge of the world, false otherwise</span>
<span style="vertical-align: top;"> */</span></span>
<span style="vertical-align: top;"><span style="color: #000000; font-weight: bold;">public</span> <span style="color: #006600; font-weight: bold;">boolean</span> isAtEdge<span style="color: #009900;">(</span><span style="color: #009900;">)</span></span>
<span style="vertical-align: top;"><span style="color: #009900;">{</span></span>
<span style="vertical-align: top;">    <span style="color: #666666; font-style: italic;">// Code omitted.</span></span>
<span style="vertical-align: top;"><span style="color: #009900;">}</span></span></pre>
</div>
</div>
</div>
<p> <br>Note that <span class="snippet" style="font-weight: bold;">@param</span> is followed by the name of a variable and then the description (without "is" or another linking verb) and that neither <span class="snippet" style="font-weight: bold;">@param</span> or <span class="snippet" style="font-weight: bold;">@return</span> descriptions end with a period.</p>
<div class="rj_insertcode">
<div class="rj_insertcode_java5" style="width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="java5" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="vertical-align: top;"><span style="color: #008000; font-style: italic; font-weight: bold;">/**</span>
<span style="vertical-align: top;"> * Returns the greater of its two parameters.</span>
<span style="vertical-align: top;"> *</span>
<span style="vertical-align: top;"> * @param num1 the first parameter</span>
<span style="vertical-align: top;"> * @param num2 the second parameter</span>
<span style="vertical-align: top;"> * @return the greater of the two parameters, or either one if they have</span>
<span style="vertical-align: top;"> *    the same value</span>
<span style="vertical-align: top;"> */</span></span>
<span style="vertical-align: top;"><span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000000; font-weight: bold;">static</span> <span style="color: #006600; font-weight: bold;">int</span> max<span style="color: #009900;">(</span><span style="color: #006600; font-weight: bold;">int</span> num1, <span style="color: #006600; font-weight: bold;">int</span> num2<span style="color: #009900;">)</span></span>
<span style="vertical-align: top;"><span style="color: #009900;">{</span></span>
<span style="vertical-align: top;">    <span style="color: #000000; font-weight: bold;">if</span> <span style="color: #009900;">(</span>num1 <span style="color: #339933;">&gt;</span> num2<span style="color: #009900;">)</span></span>
<span style="vertical-align: top;">    <span style="color: #009900;">{</span></span>
<span style="vertical-align: top;">        <span style="color: #000000; font-weight: bold;">return</span> num1<span style="color: #339933;">;</span></span>
<span style="vertical-align: top;">    <span style="color: #009900;">}</span> <span style="color: #000000; font-weight: bold;">else</span> <span style="color: #009900;">{</span></span>
<span style="vertical-align: top;">        <span style="color: #000000; font-weight: bold;">return</span> num2<span style="color: #339933;">;</span></span>
<span style="vertical-align: top;">    <span style="color: #009900;">}</span></span>
<span style="vertical-align: top;"><span style="color: #009900;">}</span></span></pre>
</div>
</div>
</div>
<p>See also <a href="http://www.oracle.com/technetwork/articles/java/index-137868.html">How to Write Doc Comments for the Javadoc Tool</a>.</p>
<p><img src="http://s2.quickmeme.com/img/62/62882e6376eeafe29ad7d71de2a5b4e3d509fe8e860930d1515c028f29c66198.jpg" alt="javadoc meme" width="413" height="330" /></p>
</nolink>

null





List

<p><span class="snippet" style="font-weight: bold;">List</span>s are very useful data structures defined in <span class="snippet" style="font-weight: bold;">java.util.List</span>. Like arrays, <span class="snippet" style="font-weight: bold;">List</span>s hold ordered collections of data of the same type. Unlike arrays:</p>
<ul>
<li>The size of a <span class="snippet" style="font-weight: bold;">List</span> can be changed after creation.</li>
<li><span class="snippet" style="font-weight: bold;">List</span>s are modified through library routines.</li>
<li><span class="snippet" style="font-weight: bold;">List</span>s are frequently returned from methods.</li>
<li>For-each loops are used with <span class="snippet" style="font-weight: bold;">List</span>s, rather than for-loops and while-loops.</li>
</ul>
<p>When declaring a <span class="snippet" style="font-weight: bold;">List</span>, the type of its elements appears in pointy brackets after the word "List". For example, the following is a declaration for a <span class="snippet" style="font-weight: bold;">List</span> whose elements are each of type <span class="snippet" style="font-weight: bold;">String</span>.</p>
<div class="rj_insertcode">
<div class="rj_insertcode_java5" style="width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="java5" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="vertical-align: top;">List<span style="color: #339933;">&lt;</span>String<span style="color: #339933;">&gt;</span> instructors<span style="color: #339933;">;</span></span></pre>
</div>
</div>
</div>
<p> <br>One way of getting a <span class="snippet" style="font-weight: bold;">List</span> is as the return value of a method, such as <a href="http://www.greenfoot.org/files/javadoc/greenfoot/World.html#getObjects(java.lang.Class)">World.getObjects()</a>. A <span class="snippet" style="font-weight: bold;">List</span> can also be constructed as shown:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_java5" style="width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="java5" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="vertical-align: top;">instructors = <span style="color: #000000; font-weight: bold;">new</span> ArrayList<span style="color: #339933;">&lt;</span>String<span style="color: #339933;">&gt;</span><span style="color: #009900;">(</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></span></pre>
</div>
</div>
</div>
<p>(We will put delay discussion of why we use <span class="snippet" style="font-weight: bold;">ArrayList</span> on the right side rather than <span class="snippet" style="font-weight: bold;">List</span>.)</p>
<p>The following example shows some ways of accessing a <span class="snippet" style="font-weight: bold;">List</span>:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_java5" style="width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="java5" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="vertical-align: top;"><span style="color: #000000; font-weight: bold;">import</span> <span style="color: #006699;">java.util.*</span><span style="color: #339933;">;</span>  <span style="color: #666666; font-style: italic;">// Import java.util.List and java.util.ArrayList.</span></span>
<span style="vertical-align: top;">   :</span>
<span style="vertical-align: top;">List<span style="color: #339933;">&lt;</span>String<span style="color: #339933;">&gt;</span> instructors = <span style="color: #000000; font-weight: bold;">new</span> ArrayList<span style="color: #339933;">&lt;</span>String<span style="color: #339933;">&gt;</span><span style="color: #009900;">(</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></span>
<span style="vertical-align: top;"><span style="color: #003399; font-weight: bold;">System</span>.<span style="color: #006633;">out</span>.<span style="color: #006633;">println</span><span style="color: #009900;">(</span>instructors.<span style="color: #006633;">size</span><span style="color: #009900;">(</span><span style="color: #009900;">)</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>  <span style="color: #666666; font-style: italic;">// This outputs: 0</span></span>
<span style="vertical-align: top;">instructors.<span style="color: #006633;">add</span><span style="color: #009900;">(</span><span style="color: #0000ff;">"Alex"</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></span>
<span style="vertical-align: top;">instructors.<span style="color: #006633;">add</span><span style="color: #009900;">(</span><span style="color: #0000ff;">"Allison"</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></span>
<span style="vertical-align: top;"><span style="color: #003399; font-weight: bold;">System</span>.<span style="color: #006633;">out</span>.<span style="color: #006633;">println</span><span style="color: #009900;">(</span>instructors.<span style="color: #006633;">size</span><span style="color: #009900;">(</span><span style="color: #009900;">)</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>  <span style="color: #666666; font-style: italic;">// This outputs: 2</span></span>
<span style="vertical-align: top;"><span style="color: #000000; font-weight: bold;">for</span> <span style="color: #009900;">(</span><span style="color: #003399; font-weight: bold;">String</span> instructor : instructors<span style="color: #009900;">)</span></span>
<span style="vertical-align: top;"><span style="color: #009900;">{</span></span>
<span style="vertical-align: top;">    <span style="color: #003399; font-weight: bold;">System</span>.<span style="color: #006633;">out</span>.<span style="color: #006633;">println</span><span style="color: #009900;">(</span><span style="color: #0000ff;">"A is for "</span> + instructor<span style="color: #009900;">)</span><span style="color: #339933;">;</span></span>
<span style="vertical-align: top;"><span style="color: #009900;">}</span></span></pre>
</div>
</div>
</div>
<p> <br>The output of the for-each loop would be:</p>
<p style="margin-left: 30px;"><span class="snippet" style="font-weight: bold;">A is for Alex</span><br><span class="snippet" style="font-weight: bold;">A is for Allison</span></p>
<p> </p>

null





literal

<p>A literal is a specific value, such as 7 or "Hello", that appears in code.  See string literal and numeric literal.</p>

null





local variable

<p>A local variable is a variable declared within a constructor or method. It is destroyed whenever the method ends and is re-created whenever the constructor or method run.</p>
<p>As with other types of variable declarations, a local variable declaration optionally includes an initialization. Unlike fields, local variable declarations do not have a visibility modifier. Here are some examples:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_java5" style="overflow: auto; width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="java5" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="vertical-align: top;">World world = getWorld<span style="color: #009900;">(</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></span>
<span style="vertical-align: top;"><span style="color: #006600; font-weight: bold;">int</span> count = <span style="color: #cc66cc;">0</span><span style="color: #339933;">;</span></span>
<span style="vertical-align: top;">Wombat wombat<span style="color: #339933;">;</span></span></pre>
</div>
</div>
</div>
<p> </p>

null





magic number

<p>A magic number is a numeric literal (other than 0 or 1) appearing in source code. Magic numbers make code hard to understand and maintain. It is better to use constants.</p>
<p>See <a href="https://en.wikipedia.org/wiki/Magic_number_(programming)#Unnamed_numerical_constants">unnamed numerical constants</a> (Wikipedia).</p>

null





main

<p>In ordinary Java programs that do not use Greenfoot, execution starts in a method declared as shown:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_java5" style="width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="java5" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="vertical-align: top;"><span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000000; font-weight: bold;">static</span> <span style="color: #006600; font-weight: bold;">void</span> main<span style="color: #009900;">(</span><span style="color: #003399; font-weight: bold;">String</span><span style="color: #009900;">[</span><span style="color: #009900;">]</span> args<span style="color: #009900;">)</span></span>
<span style="vertical-align: top;"><span style="color: #009900;">{</span></span>
<span style="vertical-align: top;">    <span style="color: #003399; font-weight: bold;">System</span>.<span style="color: #006633;">out</span>.<span style="color: #006633;">println</span><span style="color: #009900;">(</span><span style="color: #0000ff;">"Hello, world!"</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></span>
<span style="vertical-align: top;"><span style="color: #009900;">}</span></span></pre>
</div>
</div>
</div>
<p> <br>Here is how to create a Greenfoot scenario that calls a <span class="snippet" style="font-weight: bold;">main()</span> method when compiled:</p>
<ol>
<li>Create a new Greenfoot scenario:<ol style="list-style-type: lower-alpha;">
<li>Open Greenfoot.</li>
<li><span class="mac" style="color: #3366ff;">Select Scenario &gt; New...</span></li>
<li>Navigate to your <span class="mac" style="color: #3366ff;">cs63-user</span> folder (mine is <span class="mac" style="color: #3366ff;">cs63-spertus</span>).</li>
<li>After "Folder name", enter a unique name, such as "HelloWorld", as shown below.</li>
<li>Click on <span class="mac" style="color: #3366ff;">Create</span>.<br><img src="@@PLUGINFILE@@/new-scenario.png" alt="" width="557" height="230" /></li>
</ol></li>
<li>Create a subclass of <span class="snippet" style="font-weight: bold;">World</span>. A good name for it might be "TextWorld".</li>
<li>Add this call to the end of the constructor for your new class: <span class="snippet" style="font-weight: bold;">main();</span></li>
<li>Add the following method after the constructor:</li>
</ol>
<div class="rj_insertcode">
<div class="rj_insertcode_java5" style="width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="java5" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="vertical-align: top;">    <span style="color: #000000; font-weight: bold;">private</span> <span style="color: #000000; font-weight: bold;">static</span> <span style="color: #006600; font-weight: bold;">void</span> main<span style="color: #009900;">(</span><span style="color: #009900;">)</span></span>
<span style="vertical-align: top;">    <span style="color: #009900;">{</span></span>
<span style="vertical-align: top;">        <span style="color: #003399; font-weight: bold;">System</span>.<span style="color: #006633;">out</span>.<span style="color: #006633;">println</span><span style="color: #009900;">(</span><span style="color: #0000ff;">"Hello, world!"</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></span>
<span style="vertical-align: top;">    <span style="color: #009900;">}</span></span></pre>
</div>
</div>
</div>
<p> <br>When you compile, confirm that "Hello, world!" is printed. You can now replace the body of <span class="snippet" style="font-weight: bold;">main()</span> with whatever code you want to write.</p>

Greenfoot





method

<p>A method is a unit of code within a class. By default, methods are instance methods; if the keyword <span class="snippet" style="font-weight: bold;">static</span> is used in their declaration, they are static methods.</p>
<p>A method declaration consists of:</p>
<ul>
<li>a signature</li>
<li>a body, enclosed in braces</li>
</ul>
<p>An example is:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_java5" style="width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="java5" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="vertical-align: top;"><span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000000; font-weight: bold;">static</span> <span style="color: #006600; font-weight: bold;">void</span> square<span style="color: #009900;">(</span><span style="color: #006600; font-weight: bold;">int</span> x<span style="color: #009900;">)</span></span>
<span style="vertical-align: top;"><span style="color: #009900;">{</span></span>
<span style="vertical-align: top;">    <span style="color: #000000; font-weight: bold;">return</span> x <span style="color: #339933;">*</span> x<span style="color: #339933;">;</span></span>
<span style="vertical-align: top;"><span style="color: #009900;">}</span></span></pre>
</div>
</div>
</div>
<p> </p>

null





new

<p>A keyword used when instantiating a class.  See instantiation.</p>

keywords





no-args constructor

<p>If no constructor is declared for a class, Java provides a no-args constructor, also called a default constructor. (The word "arg" is short for "argument", a synonym of "parameter".) This constructor takes no parameters and does nothing except enable the object to be created.</p>

null





null

<p>The value <span class="snippet" style="font-weight: bold;">null</span> means "no object". It is the default value of variables of object types. Consider this code:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_java5" style="overflow: auto; width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="java5" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="vertical-align: top;"><span style="color: #006600; font-weight: bold;">int</span> i<span style="color: #339933;">;</span>     <span style="color: #666666; font-style: italic;">// i has the default value 0</span></span>
<span style="vertical-align: top;">Wombat w<span style="color: #339933;">;</span>  <span style="color: #666666; font-style: italic;">// w has the default value null</span></span></pre>
</div>
</div>
</div>
<p> <br>Just like an <span class="snippet" style="font-weight: bold;">int</span> variable is initialized to 0 by default, the value of <span class="snippet" style="font-weight: bold;">w</span> will be <span class="snippet" style="font-weight: bold;">null</span> until it is explicitly set to another value.</p>
<p>The value <span class="snippet" style="font-weight: bold;">null</span> is sometimes returned by methods that usually return objects but cannot in this case. For example, if a call is made to <span class="snippet" style="font-weight: bold;">Actor</span>'s <a href="http://www.greenfoot.org/files/javadoc/greenfoot/Actor.html#getOneIntersectingObject(java.lang.Class)">getOneIntersectingObject()</a> method <span style="font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 14px;">and there is no intersecting object, </span><span class="snippet" style="font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 14px; font-weight: bold;">null</span><span style="font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 14px;"> will be returned.</span></p>

null





NullPointerException

<p>It is illegal to try to access a field of a variable with the value <span class="snippet" style="font-weight: bold;">null</span> or to call a method on it. Either of the following statements would cause a <a href="http://docs.oracle.com/javase/7/docs/api/java/lang/NullPointerException.html">NullPointerException</a>:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_java5" style="overflow: auto; width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="java5" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="vertical-align: top;">Dog dog<span style="color: #339933;">;</span>              <span style="color: #666666; font-style: italic;">// dog has the default value null</span></span>
<span style="vertical-align: top;">dog.<span style="color: #006633;">name</span> = <span style="color: #0000ff;">"Calvin"</span><span style="color: #339933;">;</span>  <span style="color: #666666; font-style: italic;">// This is illegal, because dog does not point to a Dog.</span></span>
<span style="vertical-align: top;">dog.<span style="color: #006633;">bark</span><span style="color: #009900;">(</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>           <span style="color: #666666; font-style: italic;">// This is also illegal for the same reason.</span></span></pre>
</div>
</div>
</div>
<p>If you get a <span class="snippet" style="font-weight: bold;">NullPointerException</span>, look for an object variable that has been declared but not explicitly assigned a value, such as <span class="snippet" style="font-weight: bold;">dog</span> above.</p>
<p>A <span class="snippet" style="font-weight: bold;">NullPointerException</span> can also occur if a variable is set to the return value of a method that might return <span class="snippet" style="font-weight: bold;">null</span>, as in this code:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_java5" style="overflow: auto; width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="java5" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="vertical-align: top;"><span style="color: #666666; font-style: italic;">// Warning: asteroid will be set to null if there are no intersecting asteroids.</span></span>
<span style="vertical-align: top;">Asteroid asteroid = <span style="color: #009900;">(</span>Asteroid<span style="color: #009900;">)</span> getOneIntersectingObject<span style="color: #009900;">(</span>Asteroid.<span style="color: #000000; font-weight: bold;">class</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></span>
<span style="vertical-align: top;"><span style="color: #666666; font-style: italic;">// The next statement might cause a NullPointerException.</span></span>
<span style="vertical-align: top;">asteroid.<span style="color: #006633;">hit</span><span style="color: #009900;">(</span><span style="color: #cc66cc;">50</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></span></pre>
</div>
</div>
</div>
<p> </p>

null





numeric literal

<p>A numeric literal is a number that appears in the source code, such as 22. There are a lot of fancy ways to express numeric literals in Java. We are just using integer literals, which just look like regular whole numbers, possibly starting with <span class="snippet" style="font-weight: bold;">+</span> or <span class="snippet" style="font-weight: bold;">-</span>.</p>

null





object

<p>An object is an instance of a class. See instantiation.</p>

null





operand

<p>An operand is an expression on which an operation is performed. Consider the following statement:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_java5" style="overflow: auto; width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="java5" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="vertical-align: top;"><span style="color: #006600; font-weight: bold;">int</span> x = <span style="color: #cc66cc;">3</span> + <span style="color: #cc66cc;">7</span><span style="color: #339933;">;</span></span></pre>
</div>
</div>
</div>
<p> <br>The numbers <span class="snippet" style="font-weight: bold;">3</span> and <span class="snippet" style="font-weight: bold;">7</span> are operands, and <span class="snippet" style="font-weight: bold;">+</span> is the operator. The operation being performed is addition.</p>

null





operation

<p>See operator and operand.</p>

null





operator

<p>An operator is a symbol (or small sequence of symbols) that specifies that a certain operation should be performed. For example, <span class="snippet" style="font-weight: bold;">+</span> is the operator for addition and for string concatenation. The expressions on which the operation is performed are called operands. Programmers cannot add new operators to Java.</p>
<p>The Java Tutorials has a <span class="snippet" style="font-weight: bold;">list of operators</span>.</p>

null





override

<p>A subclass can override a method in its superclass rather than inheriting it. This is done by declaring a method with the same signature.</p>
<p>In order for the subclass to call the overridden method of its superclass, the keyword <span class="snippet" style="font-weight: bold;">super</span> must be used.</p>
<p>Here is an example:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_java5" style="overflow: auto; width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="java5" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="vertical-align: top;"><span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000000; font-weight: bold;">class</span> NoisyActor <span style="color: #000000; font-weight: bold;">extends</span> Actor</span>
<span style="vertical-align: top;"><span style="color: #009900;">{</span></span>
<span style="vertical-align: top;">    <span style="color: #000000; font-weight: bold;">public</span> <span style="color: #006600; font-weight: bold;">void</span> move<span style="color: #009900;">(</span><span style="color: #006600; font-weight: bold;">int</span> distance<span style="color: #009900;">)</span></span>
<span style="vertical-align: top;">    <span style="color: #009900;">{</span></span>
<span style="vertical-align: top;">        <span style="color: #003399; font-weight: bold;">System</span>.<span style="color: #006633;">out</span>.<span style="color: #006633;">println</span><span style="color: #009900;">(</span><span style="color: #0000ff;">"I am about to move."</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></span>
<span style="vertical-align: top;">        <span style="color: #666666; font-style: italic;">// Call Actor's move() method.</span></span>
<span style="vertical-align: top;">        <span style="color: #000000; font-weight: bold;">super</span>.<span style="color: #006633;">move</span><span style="color: #009900;">(</span>distance<span style="color: #009900;">)</span><span style="color: #339933;">;</span></span>
<span style="vertical-align: top;">    <span style="color: #009900;">}</span></span>
<span style="vertical-align: top;"><span style="color: #009900;">}</span></span></pre>
</div>
</div>
</div>
<p> <br>Only instance methods can be overridden.</p>

null





package

<p>Java provides packages to organize related classes. For example, the 7 classes provided by the Greenfoot authors are in the <a href="http://www.greenfoot.org/files/javadoc/greenfoot/package-summary.html"><span class="snippet" style="font-weight: bold;">greenfoot</span> package</a>. The most important classes provided with Java are in the package <a href="http://docs.oracle.com/javase/7/docs/api/java/lang/package-summary.html"><span class="snippet" style="font-weight: bold;">java.lang</span></a> ("lang" is short for "language").</p>
<p>In order to use a class from another package, the class either needs to be referred to by its full name (e.g., <span class="snippet" style="font-weight: bold;">java.util.List</span>), or must be imported, in which case it can be referred to by only the class part of its name (e.g., <span class="snippet" style="font-weight: bold;">List</span>). It can be imported either individually or with everything else in the same package:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_java5" style="overflow: auto; width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="java5" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="vertical-align: top;"><span style="color: #000000; font-weight: bold;">import</span> <span style="color: #006699;">java.util.List</span><span style="color: #339933;">;</span>  <span style="color: #666666; font-style: italic;">// Just import List from the java.util.package.</span></span>
<span style="vertical-align: top;"><span style="color: #000000; font-weight: bold;">import</span> <span style="color: #006699;">java.util.*</span><span style="color: #339933;">;</span>     <span style="color: #666666; font-style: italic;">// Import all classes in the java.util package.</span></span><span style="vertical-align: top;"><br></span></pre>
</div>
</div>
</div>
<p> <br>The package <span class="snippet" style="font-weight: bold;">java.lang</span> is a special case: All of its classes are automatically imported. This allows programs refer to <span class="snippet" style="font-weight: bold;">String</span> rather than <span class="snippet" style="font-weight: bold;">java.lang.String</span>.</p>
<p> </p>

null





parameter

<p>In computer programming, a parameter is a piece of information passed into and used by a method or constructor. For example, a parameter is passed to <span class="snippet" style="font-weight: bold;">Actor</span>'s <span class="snippet" style="font-weight: bold;">move()</span> method to say how many cells the actor should move.</p>
<p>Formal parameters appear in the signature of a constructor or method; actual parameters appear in calls.</p>

null





parameterizing a method

<p>Parameterizing a method refers to generalizing it by replacing one or more constants by one or more parameters.</p>
<p>For example, consider the method:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_java5" style="overflow: auto; width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="java5" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="vertical-align: top;"><span style="color: #000000; font-weight: bold;">public</span> <span style="color: #006600; font-weight: bold;">void</span> addScore<span style="color: #009900;">(</span><span style="color: #009900;">)</span></span>
<span style="vertical-align: top;"><span style="color: #009900;">{</span></span>
<span style="vertical-align: top;">    score = score + <span style="color: #cc66cc;">20</span><span style="color: #339933;">;</span></span>
<span style="vertical-align: top;"><span style="color: #009900;">}</span></span></pre>
</div>
</div>
</div>
<p> <br>This method can be made more general by replacing the numeric literal 20 with a parameter:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_java5" style="overflow: auto; width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="java5" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="vertical-align: top;"><span style="color: #000000; font-weight: bold;">public</span> <span style="color: #006600; font-weight: bold;">void</span> addScore<span style="color: #009900;">(</span><span style="color: #006600; font-weight: bold;">int</span> amount<span style="color: #009900;">)</span></span>
<span style="vertical-align: top;"><span style="color: #009900;">{</span></span>
<span style="vertical-align: top;">    score = score + amount<span style="color: #339933;">;</span></span>
<span style="vertical-align: top;"><span style="color: #009900;">}</span></span></pre>
</div>
</div>
</div>
<p> </p>

null





primitive type

<p>There are 8 primitive types built into Java. The two we have used are <span class="snippet" style="font-weight: bold;">int</span> and <span class="snippet" style="font-weight: bold;">boolean</span>.</p>
<p>See <a href="https://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html">The Java Tutorials</a>.</p>

null





private

<p>A visibility modifier that specifies that the following field, constructor, or method can be accessed only from the current class. No javadoc is required.</p>
<div class="rj_insertcode">
<div class="rj_insertcode_java5" style="width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="java5" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="vertical-align: top;"><span style="color: #666666; font-style: italic;">// No other class will be able to see this.</span></span>
<span style="vertical-align: top;"><span style="color: #000000; font-weight: bold;">private</span> <span style="color: #006600; font-weight: bold;">int</span> score<span style="color: #339933;">;</span></span></pre>
</div>
</div>
</div>
<p> </p>

keywords





protected

<p>A visibility modifier that specifies that the following field, constructor, or method can be accessed only from the current class or from its subclasses. No javadoc is required.</p>
<p>In the case of fields, subclasses would be able to read or write the field value.</p>
<p>In the case of constructors or methods, subclasses would be able to call them.</p>
<p>Sample use:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_java5" style="width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="java5" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="vertical-align: top;"><span style="color: #666666; font-style: italic;">// This string can be accessed from a subclass.</span></span>
<span style="vertical-align: top;"><span style="color: #000000; font-weight: bold;">protected</span> <span style="color: #003399; font-weight: bold;">String</span> name<span style="color: #339933;">;</span></span></pre>
</div>
</div>
</div>
<p> </p>

keywords





public

<p>A visibility modifier that specifies that the following field, constructor, or method can be accessed from any class.</p>
<p>In the case of fields, other classes would be able to read or write the field value.</p>
<p>In the case of constructors or methods, other classes would be able to call them.</p>
<p>Any public declaration should be preceded by javadoc.</p>

keywords





return

<p>The keyword <span class="snippet" style="font-weight: bold;">return</span> is used to communicate a value from a method to its caller. Here is an example:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_java5" style="overflow: auto; width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<table class="java5" style="border-collapse: collapse; width: 100%;">
<tbody>
<tr class="li1">
<td style="width: 1px; background: #f0f0f0; vertical-align: top; color: #676f73; border-right: 1px dotted #dddddd; font-size: 12px; text-align: right;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;">1
2
3
4
5
6
7
8
9
10
</pre>
</td>
<td style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="vertical-align: top;"><span style="color: #000000; font-weight: bold;">private</span> <span style="color: #000000; font-weight: bold;">static</span> <span style="color: #006600; font-weight: bold;">void</span> main<span style="color: #009900;">(</span><span style="color: #009900;">)</span></span>
<span style="vertical-align: top;"><span style="color: #009900;">{</span></span>
<span style="vertical-align: top;">    <span style="color: #006600; font-weight: bold;">int</span> total = square<span style="color: #009900;">(</span><span style="color: #cc66cc;">5</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></span>
<span style="vertical-align: top;">    <span style="color: #003399; font-weight: bold;">System</span>.<span style="color: #006633;">out</span>.<span style="color: #006633;">println</span><span style="color: #009900;">(</span>total<span style="color: #009900;">)</span><span style="color: #339933;">;</span></span>
<span style="vertical-align: top;"><span style="color: #009900;">}</span></span>
<span style="vertical-align: top;"> </span>
<span style="vertical-align: top;"><span style="color: #000000; font-weight: bold;">private</span> <span style="color: #000000; font-weight: bold;">static</span> <span style="color: #006600; font-weight: bold;">int</span> square<span style="color: #009900;">(</span><span style="color: #006600; font-weight: bold;">int</span> x<span style="color: #009900;">)</span></span>
<span style="vertical-align: top;"><span style="color: #009900;">{</span></span>
<span style="vertical-align: top;">    <span style="color: #000000; font-weight: bold;">return</span> x <span style="color: #339933;">*</span> x<span style="color: #339933;">;</span></span>
<span style="vertical-align: top;"><span style="color: #009900;">}</span></span></pre>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p> <br>On line 3, a call is made to the <span class="snippet" style="font-weight: bold;">square</span> method with the actual parameter 5. On line 9,<span class="snippet" style="font-weight: bold;"> square()</span> returns 25. This is stored in <span class="snippet" style="font-weight: bold;">main</span>'s local variable <span class="snippet" style="font-weight: bold;">total</span> on line 3. On the following line, the value of <span class="snippet" style="font-weight: bold;">total</span>, 25, is printed.</p>

keywords





return statement

<p>A return statement is used to communicate a value from a method to its caller. The format is:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_java5" style="overflow: auto; width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="java5" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="vertical-align: top;"><span style="color: #000000; font-weight: bold;">return</span> <span style="color: #339933;">&lt;</span>value<span style="color: #339933;">&gt;;</span></span></pre>
</div>
</div>
</div>
<p><br>where <span class="snippet" style="font-weight: bold;">&lt;value&gt;</span> is replaced by some value.</p>
<p>Unless a method is void, all paths through it must reach a return statement.</p>
<p>For a full example, see return.</p>

null





return type

<p>The return type of a method is the type of the value it returns. If a method does not return a value, its return type is <span class="snippet" style="font-weight: bold;">void</span>.</p>
<p>Some examples:</p>
<ul>
<li>The return type of <span class="snippet" style="font-weight: bold;">getWorld()</span> is <span class="snippet" style="font-weight: bold;">World</span>.</li>
<li>The return type of <span class="snippet" style="font-weight: bold;">getLeavesEaten()</span> is <span class="snippet" style="font-weight: bold;">int</span>.</li>
<li>The return type of <span class="snippet" style="font-weight: bold;">turn()</span> is <span class="snippet" style="font-weight: bold;">void</span>.</li>
</ul>
<p>See also return and return statement.</p>
<p> </p>

null





signature

<p>The signature of a method consists of (in the following order):</p>
<ul>
<li>a visibility modifier</li>
<li>optionally, the word static to indicate a static method; if not provided, it is an instance method</li>
<li>the return type</li>
<li>the name of the method (in lowerCamelCase)</li>
<li>a parenthesized parameter list</li>
</ul>
<p>For example, consider this signature:</p>
<p><span class="snippet" style="font-weight: bold;">public String convertToString(int x)</span></p>
<p>has the following components:</p>
<ul>
<li>visibility modifier: <span class="snippet" style="font-weight: bold;">public</span></li>
<li>return type: <span class="snippet" style="font-weight: bold;">String</span></li>
<li>method name: <span class="snippet" style="font-weight: bold;">convertToString</span></li>
<li>first (and only) parameter:
<ul>
<li>type: <span class="snippet" style="font-weight: bold;">int</span></li>
<li>name: <span class="snippet" style="font-weight: bold;">x</span></li>
</ul>
</li>
</ul>
<p>The signature appears in documentation and in the declaration of a method.</p>
<p>Some definitions of signature do not include the names of the formal parameters. We are including them in CS 63. The visibility modifier is also not always considered part of a signature. </p>

null





statement

<p>A statement is a "sentence" of Java code. Statements either end with a semicolon or use braces.</p>
<p>Statement types include:</p>
<ul>
<li>assignment statement</li>
<li>expression statement</li>
<li>for-loop</li>
<li>if-statement</li>
<li>variable declaration</li>
<li>while-loop</li>
</ul>
<p> </p>

null





static

<p>A keyword used to declare static methods and static fields (constants and static variables).</p>

keywords





static method

<p>A static method is a method declared with the keyword <span class="snippet" style="font-weight: bold;">static</span>. It may not refer to instance variables or directly call instance methods. Static methods are sometimes called "class methods" because they are called on a class, rather than on an instance.</p>
<p>One static method we frequently use is <span class="snippet" style="font-weight: bold;">Greenfoot.getRandomNumber()</span>. </p>

null





static variable

<p>A static variable is a variable that is shared by every instance of a class. For example, in the musical keyboard activity, all instances of <span class="snippet" style="font-weight: bold;">Key</span> shared the same <span class="snippet" style="font-weight: bold;">upImage</span>, so it was a static variable. Analogously, every human being has the same species, <em>homo sapiens</em>. Like other fields, static variables are declared at the top of a class, outside of any constructors or methods.</p>
<p>Here is a sample declaration:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_java5" style="overflow: auto; width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="java5" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="vertical-align: top;"><span style="color: #000000; font-weight: bold;">private</span> <span style="color: #000000; font-weight: bold;">static</span> GreenfootImage upImage = <span style="color: #000000; font-weight: bold;">new</span> GreenfootImage<span style="color: #009900;">(</span><span style="color: #0000ff;">"upImage.png"</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></span></pre>
</div>
</div>
</div>
<p><br>A static variable is a type of field.</p>

null





string comparison

<p>Strings (and other objects) should be compared with the .equals() method instead of with ==; the former tests whether they have the same contents, while the latter tests whether they occupy the same place in memory.</p>
<div class="rj_insertcode">
<div class="rj_insertcode_java5" style="width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="java5" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="vertical-align: top;"><span style="color: #003399; font-weight: bold;">String</span> s1 = <span style="color: #0000ff;">"hi"</span><span style="color: #339933;">;</span></span>
<span style="vertical-align: top;"><span style="color: #003399; font-weight: bold;">String</span> s2 = <span style="color: #0000ff;">"hi"</span>.<span style="color: #006633;">reverse</span><span style="color: #009900;">(</span><span style="color: #009900;">)</span>.<span style="color: #006633;">reverse</span><span style="color: #009900;">(</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span> <span style="color: #666666; font-style: italic;">// This reverses "hi" twice</span></span>
<span style="vertical-align: top;"> </span>
<span style="vertical-align: top;"><span style="color: #003399; font-weight: bold;">System</span>.<span style="color: #006633;">out</span>.<span style="color: #006633;">println</span><span style="color: #009900;">(</span>s1<span style="color: #009900;">)</span><span style="color: #339933;">;</span>  <span style="color: #666666; font-style: italic;">// This prints "hi".</span></span>
<span style="vertical-align: top;"><span style="color: #003399; font-weight: bold;">System</span>.<span style="color: #006633;">out</span>.<span style="color: #006633;">println</span><span style="color: #009900;">(</span>s2<span style="color: #009900;">)</span><span style="color: #339933;">;</span>  <span style="color: #666666; font-style: italic;">// This prints "hi".</span></span>
<span style="vertical-align: top;"><span style="color: #000000; font-weight: bold;">if</span> <span style="color: #009900;">(</span>s1 == s2<span style="color: #009900;">)</span></span>
<span style="vertical-align: top;"><span style="color: #009900;">{</span></span>
<span style="vertical-align: top;">    <span style="color: #003399; font-weight: bold;">System</span>.<span style="color: #006633;">out</span>.<span style="color: #006633;">println</span><span style="color: #009900;">(</span><span style="color: #0000ff;">"s1 == s2"</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>       <span style="color: #666666; font-style: italic;">// This does not get printed.</span></span>
<span style="vertical-align: top;"><span style="color: #009900;">}</span></span>
<span style="vertical-align: top;"><span style="color: #000000; font-weight: bold;">if</span> <span style="color: #009900;">(</span>s1.<span style="color: #006633;">equals</span><span style="color: #009900;">(</span>s2<span style="color: #009900;">)</span><span style="color: #009900;">)</span></span>
<span style="vertical-align: top;"><span style="color: #009900;">{</span></span>
<span style="vertical-align: top;">    <span style="color: #003399; font-weight: bold;">System</span>.<span style="color: #006633;">out</span>.<span style="color: #006633;">println</span><span style="color: #009900;">(</span><span style="color: #0000ff;">"s1.equals(s2)"</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>  <span style="color: #666666; font-style: italic;">// This does get printed.</span></span>
<span style="vertical-align: top;"><span style="color: #009900;">}</span></span></pre>
</div>
</div>
</div>
<p> <br>When the above program runs, it will print:</p>
<p><span class="snippet" style="font-weight: bold;">hi</span><br><span class="snippet" style="font-weight: bold;">hi</span><br><span class="snippet" style="font-weight: bold;">s1.equals(s2)</span></p>
<p>Warning: the following comparison will throw a NullPointerException if the value of <span class="snippet" style="font-weight: bold;">s1</span> is null.</p>
<div class="rj_insertcode">
<div class="rj_insertcode_java5" style="width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="java5" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="vertical-align: top;"><span style="color: #003399; font-weight: bold;">String</span> s1 = <span style="color: #006600; font-weight: bold;">null</span><span style="color: #339933;">;</span></span>
<span style="vertical-align: top;"> </span>
<span style="vertical-align: top;"><span style="color: #000000; font-weight: bold;">if</span> <span style="color: #009900;">(</span>s1.<span style="color: #006633;">equals</span><span style="color: #009900;">(</span><span style="color: #0000ff;">"hi"</span><span style="color: #009900;">)</span><span style="color: #009900;">)</span>  <span style="color: #666666; font-style: italic;">// This throws a NullPointerException</span></span>
<span style="vertical-align: top;"><span style="color: #009900;">{</span></span>
<span style="vertical-align: top;"><span style="color: #009900;">}</span></span></pre>
</div>
</div>
</div>
<p> <br>See also <a href="http://stackoverflow.com/questions/513832/how-do-i-compare-strings-in-java">this StackOverflow post</a>.</p>

null





string concatenation

<p>String concatenation is when Strings are joined to each other (and to other types) with the plus sign.</p>
<p>Here are some examples:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_java5" style="overflow: auto; width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="java5" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="vertical-align: top;"><span style="color: #003399; font-weight: bold;">System</span>.<span style="color: #006633;">out</span>.<span style="color: #006633;">println</span><span style="color: #009900;">(</span><span style="color: #0000ff;">"Hello, "</span> + <span style="color: #0000ff;">"world!"</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>  <span style="color: #666666; font-style: italic;">// This prints "Hello, world!"</span></span>
<span style="vertical-align: top;"><span style="color: #006600; font-weight: bold;">int</span> x = <span style="color: #cc66cc;">1</span><span style="color: #339933;">;</span></span>
<span style="vertical-align: top;"><span style="color: #003399; font-weight: bold;">System</span>.<span style="color: #006633;">out</span>.<span style="color: #006633;">println</span><span style="color: #009900;">(</span><span style="color: #0000ff;">"You are #"</span> + x + <span style="color: #0000ff;">"!"</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span> <span style="color: #666666; font-style: italic;">// This prints "You are #1!"</span></span></pre>
</div>
</div>
</div>
<p> <br>A common mistake is to forget the plus sign between the parts you want to concatenate.</p>

null





string literal

<p>A string literal is a string that appears in the code, such as <span class="snippet" style="font-weight: bold;">"Hello, world!"</span>. It starts with double-quotes and ends with double-quotes.</p>
<p> </p>

null





stub

<p>A stub is an empty method declaration. It is used as a placeholder for a complete method. Putting it in place enables us to write calls to the method, although nothing will happen when the stub is called.</p>
<p>Here is a stub for a method that does not return a value:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_java5" style="overflow: auto; width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="java5" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="vertical-align: top;"><span style="color: #000000; font-weight: bold;">private</span> <span style="color: #006600; font-weight: bold;">void</span> slowDown<span style="color: #009900;">(</span><span style="color: #009900;">)</span></span>
<span style="vertical-align: top;"><span style="color: #009900;">{</span></span>
<span style="vertical-align: top;"><span style="color: #009900;">}</span></span></pre>
</div>
</div>
</div>
<p> <br>If the stubbed method is not <span class="snippet" style="font-weight: bold;">void</span>, it must include a return statement, which should include the most boring return value, such as 0 for <span class="snippet" style="font-weight: bold;">int</span> or <span class="snippet" style="font-weight: bold;">null</span> for a class return type:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_java5" style="overflow: auto; width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="java5" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="vertical-align: top;"><span style="color: #000000;"><strong>private </strong></span>Wombat getHappiestWombat<span style="color: #009900;">(</span><span style="color: #009900;">)</span></span>
<span style="vertical-align: top;"><span style="color: #009900;">{</span></span>
<span style="vertical-align: top;">    <span style="color: #000000; font-weight: bold;">return</span> <span style="color: #006600; font-weight: bold;">null</span><span style="color: #339933;">;</span></span>
<span style="vertical-align: top;"><span style="color: #009900;">}</span></span></pre>
</div>
</div>
</div>
<p> </p>
<p> </p>

null





style

<p>See coding conventions.</p>

null





subclass

<p>A class, such as <span class="snippet" style="font-weight: bold;">Wombat</span>, may be a subclass of up to one other class, such as <span class="snippet" style="font-weight: bold;">Actor</span>, which is called the superclass. A subclass inherits all the fields and methods of the superclass, although it cannot access ones declared private. An is-a relationship should exist between a subclass and superclass.</p>
<p>The following declares <span class="snippet" style="font-weight: bold;">Wombat</span> to be a subclass of <span class="snippet" style="font-weight: bold;">Actor</span>:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_java5" style="width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="java5" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="vertical-align: top;"><span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000000; font-weight: bold;">class</span> Wombat <span style="color: #000000; font-weight: bold;">extends</span> Actor</span>
<span style="vertical-align: top;"><span style="color: #009900;">{<br></span></span>   // Code not shown.
<span style="vertical-align: top;"><span style="color: #009900;">}</span></span></pre>
</div>
</div>
</div>
<p> <br>Any instance field or method of <span class="snippet" style="font-weight: bold;">Actor</span>, such as <span class="snippet" style="font-weight: bold;">move()</span> and <span class="snippet" style="font-weight: bold;">isAtEdge()</span>, can be called on an instance of <span class="snippet" style="font-weight: bold;">Wombat</span>.</p>
<p>A subclass can override instance methods defined in its superclass.</p>
<p>See also <a href="https://www.cis.upenn.edu/~matuszek/General/JavaSyntax/subclasses.html">Subclasses, Superclasses, and Inheritance</a>.</p>

null





super

<p>The keyword super is used to reference constructors or methods in a superclass.</p>
<p>For examples, see constructor and override.</p>

keywords





superclass

<p>See subclass.</p>

null





test-driven development

<p>Test-driven development is a development process in which the programmer writes tests before writing the code that will be tested. Benefits include writing better code after having thought of devious test cases.</p>
<p>See also <a href="https://en.wikipedia.org/wiki/Test-driven_development">Test-driven development</a> (Wikipedia).</p>

null





this

<p>For now, see <a href="http://docs.oracle.com/javase/tutorial/java/javaOO/thiskey.html">Using the <span class="snippet" style="font-weight: bold;">this</span> keyword</a> in the Java Tutorials.</p>

keywords





TODO

<p>Here's where I keep a list of the next entries I plan to add:</p>
<ul>
<li>test/edge/boundary case [http://cartoontester.blogspot.com/2010/01/how-to-spot-tester-in.html]</li>
</ul>
<p>Suggestions are always welcome.</p>

null





type

<p>Types specify the values that a piece of data can have and the operations that can be performed on it. Variables, constants, formal parameters, and expressions all have types. A type can be either a primitive type or a class.</p>

null





unit test

<p>Unit testing is the testing the smallest possible units of a program, such as individual methods. Some programmers practice test-driven development, where they write tests before writing the methods under test.</p>
<p>See also <a href="https://en.wikipedia.org/wiki/Unit_testing">Unit testing (Wikipedia)</a>.</p>

null





variable declaration

<p>A variable declaration tells the compiler that you would like to create an instance variable, static variable, or local variable. A variable declaration includes a type and a name; there may be additional items, such as visibility modifiers. Here are examples:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_java5" style="width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="java5" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="vertical-align: top;"><span style="color: #000000; font-weight: bold;">private</span> <span style="color: #006600; font-weight: bold;">int</span> score<span style="color: #339933;">;</span>  <span style="color: #666666; font-style: italic;">// This is an instance variable.</span></span>
<span style="vertical-align: top;"><span style="color: #000000; font-weight: bold;">private</span> <span style="color: #000000; font-weight: bold;">static</span> GreenfootImage upImage<span style="color: #339933;">;</span>  <span style="color: #666666; font-style: italic;">// This is a static variable.</span></span>
<span style="vertical-align: top;"><span style="color: #006600; font-weight: bold;">int</span> count<span style="color: #339933;">;</span>  <span style="color: #666666; font-style: italic;">// This is a local variable.</span></span></pre>
</div>
</div>
</div>
<p> <br>It is possible to assign an initial value (initialize) a variable when declaring it, but logically declaring a variable and giving it a value are different steps, even though they can appear in the same statement:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_java5" style="width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="java5" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="vertical-align: top;"><span style="color: #000000; font-weight: bold;">private</span> <span style="color: #006600; font-weight: bold;">int</span> score = <span style="color: #cc66cc;">100</span><span style="color: #339933;">;</span></span>
<span style="vertical-align: top;"><span style="color: #000000; font-weight: bold;">private</span> <span style="color: #000000; font-weight: bold;">static</span> GreenfootImage upImage = <span style="color: #000000; font-weight: bold;">new</span> GreenfootImage<span style="color: #009900;">(</span><span style="color: #0000ff;">"up-image.jpg"</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></span>
<span style="vertical-align: top;"><span style="color: #006600; font-weight: bold;">int</span> count = <span style="color: #cc66cc;">10</span><span style="color: #339933;">;</span></span></pre>
</div>
</div>
</div>
<p><br>If an <span class="snippet" style="font-weight: bold;">int</span> is declared but not explicitly initialized, it gets the value 0. A <span class="snippet" style="font-weight: bold;">boolean</span> gets the value false. An object gets the value null.</p>
<p> </p>

statements





visibility modifier

<p>A keyword that controls the visibility of a field, method, or constructor. Possible values are public, protected, and private.</p>
<p>See also <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/accesscontrol.html">The Java Tutorials</a>.</p>

null





void

<p>The keyword <span class="snippet" style="font-weight: bold;">void</span> is used when declaring a method to indicate that it does not return anything.</p>

keywords





while-loop

<p>A while-loop is a control flow structure for executing code multiple times.</p>
<p>As with for-loops, its components include:</p>
<ul>
<li>initial expression, such as int <span class="snippet" style="font-weight: bold;">i = 0</span></li>
<li>termination expression, such as <span class="snippet" style="font-weight: bold;">i &lt; 10</span></li>
<li>increment expression, such as<span class="snippet" style="font-weight: bold;"> i++</span></li>
<li>body: a block of statements</li>
</ul>
<p>There is a <em>loop variable</em>, <span class="snippet">i</span> in this example, whose value varies over the course of execution. Its initial value is set in the initial expression. At the beginning of each <em>iteration</em>, the termination condition is checked. If it is false, the loop ends. Otherwise, the body is run; the body optionally references i. Then, the increment expression is run, and the next iteration starts.</p>
<p>Here is a complete loop, which prints the numbers from 0 to 9:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_java5" style="overflow: auto; width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="java5" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="vertical-align: top;"><span style="color: #006600; font-weight: bold;">int</span> i = <span style="color: #cc66cc;">0</span><span style="color: #339933;">;</span>       <span style="color: #666666; font-style: italic;">// Initialization</span></span>
<span style="vertical-align: top;"><span style="color: #000000; font-weight: bold;">while</span> <span style="color: #009900;">(</span>i <span style="color: #339933;">&lt;</span> <span style="color: #cc66cc;">10</span><span style="color: #009900;">)</span>   <span style="color: #666666; font-style: italic;">// Termination condition</span></span>
<span style="vertical-align: top;"><span style="color: #009900;">{</span>                <span style="color: #666666; font-style: italic;">// Loop body starts</span></span>
<span style="vertical-align: top;">    <span style="color: #003399; font-weight: bold;">System</span>.<span style="color: #006633;">out</span>.<span style="color: #006633;">println</span><span style="color: #009900;">(</span>i<span style="color: #009900;">)</span><span style="color: #339933;">;</span></span>
<span style="vertical-align: top;">    i++<span style="color: #339933;">;</span>                       <span style="color: #666666; font-style: italic;">// Increment expression</span></span>
<span style="vertical-align: top;"><span style="color: #009900;">}</span>                <span style="color: #666666; font-style: italic;">// Loop body ends</span></span></pre>
</div>
</div>
</div>
<p>Note that it is permissible and sometimes desirable for the so-called "increment expression" to decrement the loop variable.</p>
<p>Not all while-statements include all of these expressions. The following while-statement prevents the method from returning until the sound has completed playing:</p>
<div class="rj_insertcode">
<div class="rj_insertcode_java5" style="overflow: auto; width: 100%; height: auto; border: 1px solid #054b6e; background: #f8f8f8;">
<div class="java5" style="border-collapse: collapse; width: 100%;">
<pre style="margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;"><span style="vertical-align: top;"><span style="color: #000000; font-weight: bold;">public</span> <span style="color: #006600; font-weight: bold;">void</span> play<span style="color: #009900;">(</span><span style="color: #009900;">)</span></span>
<span style="vertical-align: top;"><span style="color: #009900;">{</span></span>
<span style="vertical-align: top;">    GreenfootSound sound = <span style="color: #000000; font-weight: bold;">new</span> GreenfootSound<span style="color: #009900;">(</span><span style="color: #0000ff;">"note.wav"</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></span>
<span style="vertical-align: top;">    sound.<span style="color: #006633;">play</span><span style="color: #009900;">(</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></span>
<span style="vertical-align: top;">    <span style="color: #000000; font-weight: bold;">while</span><span style="color: #009900;">(</span>sound.<span style="color: #006633;">isPlaying</span><span style="color: #009900;">(</span><span style="color: #009900;">)</span><span style="color: #009900;">)</span></span>
<span style="vertical-align: top;">    <span style="color: #009900;">{</span></span>
<span style="vertical-align: top;">        <span style="color: #666666; font-style: italic;">// Do nothing.</span></span>
<span style="vertical-align: top;">    <span style="color: #009900;">}</span></span>
<span style="vertical-align: top;"><span style="color: #009900;">}</span></span></pre>
</div>
</div>
</div>
<p> </p>
<p>See <a href="https://docs.oracle.com/javase/tutorial/java/nutsandbolts/while.html">The while and do-while statements</a> (The Java Tutorials). (Do-while statements are rarely used.)</p>
<p> </p>

statements